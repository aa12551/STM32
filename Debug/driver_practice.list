
driver_practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002030  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022a4  080022a4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080022a4  080022a4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022a4  080022a4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022a4  080022a4  000122a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022a8  080022a8  000122a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080022ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000038  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009834  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018b3  00000000  00000000  000298cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000388  00000000  00000000  0002b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002e0  00000000  00000000  0002b508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b36f  00000000  00000000  0002b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000050f5  00000000  00000000  00046b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ed6c  00000000  00000000  0004bc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000da9b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001398  00000000  00000000  000daa0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080021c8 	.word	0x080021c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	080021c8 	.word	0x080021c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <GPIO_SET>:
#define CR2_SWSTART		(1U<<30)
#define SR_EOC			(1U<<1)


void GPIO_SET(GPIO_TypeDef * port,uint32_t pin, uint8_t value)
{
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	71fb      	strb	r3, [r7, #7]
	// Connect clock to port
	switch((uint32_t) port){
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	4a2c      	ldr	r2, [pc, #176]	; (8000354 <GPIO_SET+0xc4>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d024      	beq.n	80002f0 <GPIO_SET+0x60>
 80002a6:	4a2b      	ldr	r2, [pc, #172]	; (8000354 <GPIO_SET+0xc4>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d828      	bhi.n	80002fe <GPIO_SET+0x6e>
 80002ac:	4a2a      	ldr	r2, [pc, #168]	; (8000358 <GPIO_SET+0xc8>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d017      	beq.n	80002e2 <GPIO_SET+0x52>
 80002b2:	4a29      	ldr	r2, [pc, #164]	; (8000358 <GPIO_SET+0xc8>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d822      	bhi.n	80002fe <GPIO_SET+0x6e>
 80002b8:	4a28      	ldr	r2, [pc, #160]	; (800035c <GPIO_SET+0xcc>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d003      	beq.n	80002c6 <GPIO_SET+0x36>
 80002be:	4a28      	ldr	r2, [pc, #160]	; (8000360 <GPIO_SET+0xd0>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d007      	beq.n	80002d4 <GPIO_SET+0x44>
 80002c4:	e01b      	b.n	80002fe <GPIO_SET+0x6e>
	case (uint32_t) GPIOA:
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002c6:	4b27      	ldr	r3, [pc, #156]	; (8000364 <GPIO_SET+0xd4>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ca:	4a26      	ldr	r2, [pc, #152]	; (8000364 <GPIO_SET+0xd4>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80002d2:	e014      	b.n	80002fe <GPIO_SET+0x6e>
	case (uint32_t) GPIOB:
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80002d4:	4b23      	ldr	r3, [pc, #140]	; (8000364 <GPIO_SET+0xd4>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d8:	4a22      	ldr	r2, [pc, #136]	; (8000364 <GPIO_SET+0xd4>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80002e0:	e00d      	b.n	80002fe <GPIO_SET+0x6e>
	case (uint32_t) GPIOC:
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80002e2:	4b20      	ldr	r3, [pc, #128]	; (8000364 <GPIO_SET+0xd4>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e6:	4a1f      	ldr	r2, [pc, #124]	; (8000364 <GPIO_SET+0xd4>)
 80002e8:	f043 0304 	orr.w	r3, r3, #4
 80002ec:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80002ee:	e006      	b.n	80002fe <GPIO_SET+0x6e>
	case (uint32_t) GPIOD:
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80002f0:	4b1c      	ldr	r3, [pc, #112]	; (8000364 <GPIO_SET+0xd4>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a1b      	ldr	r2, [pc, #108]	; (8000364 <GPIO_SET+0xd4>)
 80002f6:	f043 0308 	orr.w	r3, r3, #8
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80002fc:	bf00      	nop
	}

	// Set the pin is output type
	port->MODER |= pin * pin;
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	fb03 f303 	mul.w	r3, r3, r3
 8000308:	431a      	orrs	r2, r3
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	601a      	str	r2, [r3, #0]
	port->MODER &=~ pin * pin * 2;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	43db      	mvns	r3, r3
 8000316:	68b9      	ldr	r1, [r7, #8]
 8000318:	fb01 f303 	mul.w	r3, r1, r3
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	401a      	ands	r2, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	601a      	str	r2, [r3, #0]
	// Set the pin value
	if(value)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d006      	beq.n	8000338 <GPIO_SET+0xa8>
		port->BSRR |= pin;
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	699a      	ldr	r2, [r3, #24]
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	431a      	orrs	r2, r3
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	619a      	str	r2, [r3, #24]
	else
		port->BSRR |= pin << 16;
}
 8000336:	e006      	b.n	8000346 <GPIO_SET+0xb6>
		port->BSRR |= pin << 16;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	699a      	ldr	r2, [r3, #24]
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	041b      	lsls	r3, r3, #16
 8000340:	431a      	orrs	r2, r3
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	619a      	str	r2, [r3, #24]
}
 8000346:	bf00      	nop
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40020c00 	.word	0x40020c00
 8000358:	40020800 	.word	0x40020800
 800035c:	40020000 	.word	0x40020000
 8000360:	40020400 	.word	0x40020400
 8000364:	40023800 	.word	0x40023800

08000368 <exti_callback>:
	__enable_irq();


}
static void exti_callback(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	printf("BTN Pressed...\n\r");
 800036c:	4805      	ldr	r0, [pc, #20]	; (8000384 <exti_callback+0x1c>)
 800036e:	f000 ffd5 	bl	800131c <iprintf>
	GPIO_SET(GPIOD,PIN13,SET);
 8000372:	2201      	movs	r2, #1
 8000374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000378:	4803      	ldr	r0, [pc, #12]	; (8000388 <exti_callback+0x20>)
 800037a:	f7ff ff89 	bl	8000290 <GPIO_SET>
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	080021e0 	.word	0x080021e0
 8000388:	40020c00 	.word	0x40020c00

0800038c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	if((EXTI->PR & PIN0)!=0)
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <EXTI0_IRQHandler+0x24>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	f003 0301 	and.w	r3, r3, #1
 8000398:	2b00      	cmp	r3, #0
 800039a:	d007      	beq.n	80003ac <EXTI0_IRQHandler+0x20>
	{
		/*Clear PR flag*/
		EXTI->PR |= PIN0;
 800039c:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <EXTI0_IRQHandler+0x24>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a03      	ldr	r2, [pc, #12]	; (80003b0 <EXTI0_IRQHandler+0x24>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6153      	str	r3, [r2, #20]
		//Do something...
		exti_callback();
 80003a8:	f7ff ffde 	bl	8000368 <exti_callback>
	}

}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40013c00 	.word	0x40013c00

080003b4 <adc_callback>:
	return (ADC1->DR);
}


static void adc_callback(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
	int sensor_value = ADC1->DR;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <adc_callback+0x34>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	603b      	str	r3, [r7, #0]
	printf("Sensor value : %d \n\r",(int)sensor_value);
 80003c0:	6839      	ldr	r1, [r7, #0]
 80003c2:	480a      	ldr	r0, [pc, #40]	; (80003ec <adc_callback+0x38>)
 80003c4:	f000 ffaa 	bl	800131c <iprintf>
	for(int i = 0;i<100000;i++){}
 80003c8:	2300      	movs	r3, #0
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	e002      	b.n	80003d4 <adc_callback+0x20>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <adc_callback+0x3c>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	ddf8      	ble.n	80003ce <adc_callback+0x1a>

}
 80003dc:	bf00      	nop
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40012000 	.word	0x40012000
 80003ec:	080021f4 	.word	0x080021f4
 80003f0:	0001869f 	.word	0x0001869f

080003f4 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	/*Check for eoc in SR*/
	if((ADC1->SR & ADC_SR_EOC) !=0)
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <ADC_IRQHandler+0x24>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f003 0302 	and.w	r3, r3, #2
 8000400:	2b00      	cmp	r3, #0
 8000402:	d007      	beq.n	8000414 <ADC_IRQHandler+0x20>
	{
		/*Clear EOC*/
		ADC1->SR &=~ ADC_SR_EOC;
 8000404:	4b04      	ldr	r3, [pc, #16]	; (8000418 <ADC_IRQHandler+0x24>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a03      	ldr	r2, [pc, #12]	; (8000418 <ADC_IRQHandler+0x24>)
 800040a:	f023 0302 	bic.w	r3, r3, #2
 800040e:	6013      	str	r3, [r2, #0]

		//Do something
		adc_callback();
 8000410:	f7ff ffd0 	bl	80003b4 <adc_callback>
	}
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40012000 	.word	0x40012000

0800041c <main>:
#include "stdint.h"
#include "screen.h"


int main(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	ILI9341_Init();
 8000420:	f000 f906 	bl	8000630 <ILI9341_Init>
	ILI9341_FillScreen(GREEN);
 8000424:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000428:	f000 faf0 	bl	8000a0c <ILI9341_FillScreen>
	ILI9341_DrawFilledCircle(100,100,20,RED);
 800042c:	231f      	movs	r3, #31
 800042e:	2214      	movs	r2, #20
 8000430:	2164      	movs	r1, #100	; 0x64
 8000432:	2064      	movs	r0, #100	; 0x64
 8000434:	f000 fb76 	bl	8000b24 <ILI9341_DrawFilledCircle>
	while(1)
	{
		systickDelayMs(10);
 8000438:	200a      	movs	r0, #10
 800043a:	f000 fe31 	bl	80010a0 <systickDelayMs>
 800043e:	e7fb      	b.n	8000438 <main+0x1c>

08000440 <ILI9341_SPI_TxBuffer>:
#include "spi.h"
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	807b      	strh	r3, [r7, #2]
	spi_transmit(SPI1,buffer,len);
 800044c:	887b      	ldrh	r3, [r7, #2]
 800044e:	461a      	mov	r2, r3
 8000450:	6879      	ldr	r1, [r7, #4]
 8000452:	4803      	ldr	r0, [pc, #12]	; (8000460 <ILI9341_SPI_TxBuffer+0x20>)
 8000454:	f000 fd4e 	bl	8000ef4 <spi_transmit>
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40013000 	.word	0x40013000

08000464 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	spi_transmit(SPI1,&data,1);
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	2201      	movs	r2, #1
 8000472:	4619      	mov	r1, r3
 8000474:	4803      	ldr	r0, [pc, #12]	; (8000484 <ILI9341_SPI_Tx+0x20>)
 8000476:	f000 fd3d 	bl	8000ef4 <spi_transmit>
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40013000 	.word	0x40013000

08000488 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	GPIO_SET(LCD_DC_PORT, LCD_DC_PIN, RESET);	//command
 8000492:	2200      	movs	r2, #0
 8000494:	2104      	movs	r1, #4
 8000496:	4808      	ldr	r0, [pc, #32]	; (80004b8 <ILI9341_WriteCommand+0x30>)
 8000498:	f7ff fefa 	bl	8000290 <GPIO_SET>
	GPIO_SET(LCD_CS_PORT, LCD_CS_PIN, RESET);	//select
 800049c:	2200      	movs	r2, #0
 800049e:	2102      	movs	r1, #2
 80004a0:	4805      	ldr	r0, [pc, #20]	; (80004b8 <ILI9341_WriteCommand+0x30>)
 80004a2:	f7ff fef5 	bl	8000290 <GPIO_SET>
	ILI9341_SPI_Tx(cmd);
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ffdb 	bl	8000464 <ILI9341_SPI_Tx>
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40020800 	.word	0x40020800

080004bc <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
	GPIO_SET(LCD_DC_PORT, LCD_DC_PIN, SET);	//data
 80004c6:	2201      	movs	r2, #1
 80004c8:	2104      	movs	r1, #4
 80004ca:	480a      	ldr	r0, [pc, #40]	; (80004f4 <ILI9341_WriteData+0x38>)
 80004cc:	f7ff fee0 	bl	8000290 <GPIO_SET>
	GPIO_SET(LCD_CS_PORT, LCD_CS_PIN, RESET);	//select
 80004d0:	2200      	movs	r2, #0
 80004d2:	2102      	movs	r1, #2
 80004d4:	4807      	ldr	r0, [pc, #28]	; (80004f4 <ILI9341_WriteData+0x38>)
 80004d6:	f7ff fedb 	bl	8000290 <GPIO_SET>
	ILI9341_SPI_Tx(data);
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff ffc1 	bl	8000464 <ILI9341_SPI_Tx>
	GPIO_SET(LCD_CS_PORT, LCD_CS_PIN, SET);	//deselect
 80004e2:	2201      	movs	r2, #1
 80004e4:	2102      	movs	r1, #2
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <ILI9341_WriteData+0x38>)
 80004e8:	f7ff fed2 	bl	8000290 <GPIO_SET>
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40020800 	.word	0x40020800

080004f8 <ILI9341_WriteBuffer>:
void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	807b      	strh	r3, [r7, #2]
	GPIO_SET(LCD_DC_PORT, LCD_DC_PIN, SET);	//data
 8000504:	2201      	movs	r2, #1
 8000506:	2104      	movs	r1, #4
 8000508:	480a      	ldr	r0, [pc, #40]	; (8000534 <ILI9341_WriteBuffer+0x3c>)
 800050a:	f7ff fec1 	bl	8000290 <GPIO_SET>
	GPIO_SET(LCD_CS_PORT, LCD_CS_PIN, RESET);	//select
 800050e:	2200      	movs	r2, #0
 8000510:	2102      	movs	r1, #2
 8000512:	4808      	ldr	r0, [pc, #32]	; (8000534 <ILI9341_WriteBuffer+0x3c>)
 8000514:	f7ff febc 	bl	8000290 <GPIO_SET>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000518:	887b      	ldrh	r3, [r7, #2]
 800051a:	4619      	mov	r1, r3
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff ff8f 	bl	8000440 <ILI9341_SPI_TxBuffer>
	GPIO_SET(LCD_CS_PORT, LCD_CS_PIN, SET);	//deselect
 8000522:	2201      	movs	r2, #1
 8000524:	2102      	movs	r1, #2
 8000526:	4803      	ldr	r0, [pc, #12]	; (8000534 <ILI9341_WriteBuffer+0x3c>)
 8000528:	f7ff feb2 	bl	8000290 <GPIO_SET>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40020800 	.word	0x40020800

08000538 <ILI9341_Reset>:
void ILI9341_Reset(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	GPIO_SET(LCD_RST_PORT, LCD_RST_PIN, RESET);	//Disable
 800053c:	2200      	movs	r2, #0
 800053e:	2108      	movs	r1, #8
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <ILI9341_Reset+0x3c>)
 8000542:	f7ff fea5 	bl	8000290 <GPIO_SET>
	systickDelayMs(10);
 8000546:	200a      	movs	r0, #10
 8000548:	f000 fdaa 	bl	80010a0 <systickDelayMs>
	GPIO_SET(LCD_CS_PORT, LCD_CS_PIN, RESET);		//Select
 800054c:	2200      	movs	r2, #0
 800054e:	2102      	movs	r1, #2
 8000550:	4808      	ldr	r0, [pc, #32]	; (8000574 <ILI9341_Reset+0x3c>)
 8000552:	f7ff fe9d 	bl	8000290 <GPIO_SET>
	systickDelayMs(10);
 8000556:	200a      	movs	r0, #10
 8000558:	f000 fda2 	bl	80010a0 <systickDelayMs>
	GPIO_SET(LCD_RST_PORT, LCD_RST_PIN, SET);		//Enable
 800055c:	2201      	movs	r2, #1
 800055e:	2108      	movs	r1, #8
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <ILI9341_Reset+0x3c>)
 8000562:	f7ff fe95 	bl	8000290 <GPIO_SET>
	GPIO_SET(LCD_CS_PORT, LCD_CS_PIN, SET); 		//Deselect
 8000566:	2201      	movs	r2, #1
 8000568:	2102      	movs	r1, #2
 800056a:	4802      	ldr	r0, [pc, #8]	; (8000574 <ILI9341_Reset+0x3c>)
 800056c:	f7ff fe90 	bl	8000290 <GPIO_SET>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40020800 	.word	0x40020800

08000578 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	GPIO_SET(LCD_RST_PORT, LCD_RST_PIN, SET);		//Enable
 800057c:	2201      	movs	r2, #1
 800057e:	2108      	movs	r1, #8
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <ILI9341_Enable+0x14>)
 8000582:	f7ff fe85 	bl	8000290 <GPIO_SET>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40020800 	.word	0x40020800

08000590 <ILI9341_SetRotation>:
void ILI9341_SetRotation(uint8_t rotation)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 800059a:	2036      	movs	r0, #54	; 0x36
 800059c:	f7ff ff74 	bl	8000488 <ILI9341_WriteCommand>
	systickDelayMs(1);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 fd7d 	bl	80010a0 <systickDelayMs>

	switch(rotation)
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d837      	bhi.n	800061c <ILI9341_SetRotation+0x8c>
 80005ac:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <ILI9341_SetRotation+0x24>)
 80005ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b2:	bf00      	nop
 80005b4:	080005c5 	.word	0x080005c5
 80005b8:	080005db 	.word	0x080005db
 80005bc:	080005f1 	.word	0x080005f1
 80005c0:	08000607 	.word	0x08000607
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80005c4:	2048      	movs	r0, #72	; 0x48
 80005c6:	f7ff ff79 	bl	80004bc <ILI9341_WriteData>
		LCD_WIDTH = 320;
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <ILI9341_SetRotation+0x98>)
 80005cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005d0:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <ILI9341_SetRotation+0x9c>)
 80005d4:	22f0      	movs	r2, #240	; 0xf0
 80005d6:	801a      	strh	r2, [r3, #0]
		break;
 80005d8:	e021      	b.n	800061e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20 | 0x08);
 80005da:	2028      	movs	r0, #40	; 0x28
 80005dc:	f7ff ff6e 	bl	80004bc <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <ILI9341_SetRotation+0x98>)
 80005e2:	22f0      	movs	r2, #240	; 0xf0
 80005e4:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <ILI9341_SetRotation+0x9c>)
 80005e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005ec:	801a      	strh	r2, [r3, #0]
		break;
 80005ee:	e016      	b.n	800061e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80005f0:	2088      	movs	r0, #136	; 0x88
 80005f2:	f7ff ff63 	bl	80004bc <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <ILI9341_SetRotation+0x98>)
 80005f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005fc:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <ILI9341_SetRotation+0x9c>)
 8000600:	22f0      	movs	r2, #240	; 0xf0
 8000602:	801a      	strh	r2, [r3, #0]
		break;
 8000604:	e00b      	b.n	800061e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40 | 0x80 | 0x20 | 0x08);
 8000606:	20e8      	movs	r0, #232	; 0xe8
 8000608:	f7ff ff58 	bl	80004bc <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <ILI9341_SetRotation+0x98>)
 800060e:	22f0      	movs	r2, #240	; 0xf0
 8000610:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <ILI9341_SetRotation+0x9c>)
 8000614:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000618:	801a      	strh	r2, [r3, #0]
		break;
 800061a:	e000      	b.n	800061e <ILI9341_SetRotation+0x8e>
	default:
		break;
 800061c:	bf00      	nop
	}
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000002 	.word	0x20000002
 800062c:	20000000 	.word	0x20000000

08000630 <ILI9341_Init>:
void ILI9341_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	/*Enable SPI gpio*/
	spi_gpio_init(SPI1);
 8000634:	4886      	ldr	r0, [pc, #536]	; (8000850 <ILI9341_Init+0x220>)
 8000636:	f000 fafd 	bl	8000c34 <spi_gpio_init>

	/*Config SPI*/
	spi_config(SPI1);
 800063a:	4885      	ldr	r0, [pc, #532]	; (8000850 <ILI9341_Init+0x220>)
 800063c:	f000 fbfa 	bl	8000e34 <spi_config>

	ILI9341_Enable();
 8000640:	f7ff ff9a 	bl	8000578 <ILI9341_Enable>
	ILI9341_Reset();
 8000644:	f7ff ff78 	bl	8000538 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000648:	2001      	movs	r0, #1
 800064a:	f7ff ff1d 	bl	8000488 <ILI9341_WriteCommand>
	systickDelayMs(10);
 800064e:	200a      	movs	r0, #10
 8000650:	f000 fd26 	bl	80010a0 <systickDelayMs>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000654:	20cb      	movs	r0, #203	; 0xcb
 8000656:	f7ff ff17 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800065a:	2039      	movs	r0, #57	; 0x39
 800065c:	f7ff ff2e 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000660:	202c      	movs	r0, #44	; 0x2c
 8000662:	f7ff ff2b 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000666:	2000      	movs	r0, #0
 8000668:	f7ff ff28 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 800066c:	2034      	movs	r0, #52	; 0x34
 800066e:	f7ff ff25 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000672:	2002      	movs	r0, #2
 8000674:	f7ff ff22 	bl	80004bc <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000678:	20cf      	movs	r0, #207	; 0xcf
 800067a:	f7ff ff05 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff ff1c 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000684:	20c1      	movs	r0, #193	; 0xc1
 8000686:	f7ff ff19 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 800068a:	2030      	movs	r0, #48	; 0x30
 800068c:	f7ff ff16 	bl	80004bc <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000690:	20e8      	movs	r0, #232	; 0xe8
 8000692:	f7ff fef9 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000696:	2085      	movs	r0, #133	; 0x85
 8000698:	f7ff ff10 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ff0d 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80006a2:	2078      	movs	r0, #120	; 0x78
 80006a4:	f7ff ff0a 	bl	80004bc <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80006a8:	20ea      	movs	r0, #234	; 0xea
 80006aa:	f7ff feed 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff ff04 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ff01 	bl	80004bc <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80006ba:	20ed      	movs	r0, #237	; 0xed
 80006bc:	f7ff fee4 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80006c0:	2064      	movs	r0, #100	; 0x64
 80006c2:	f7ff fefb 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80006c6:	2003      	movs	r0, #3
 80006c8:	f7ff fef8 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80006cc:	2012      	movs	r0, #18
 80006ce:	f7ff fef5 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 80006d2:	2081      	movs	r0, #129	; 0x81
 80006d4:	f7ff fef2 	bl	80004bc <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 80006d8:	20f7      	movs	r0, #247	; 0xf7
 80006da:	f7ff fed5 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 80006de:	2020      	movs	r0, #32
 80006e0:	f7ff feec 	bl	80004bc <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 80006e4:	20c0      	movs	r0, #192	; 0xc0
 80006e6:	f7ff fecf 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 80006ea:	2023      	movs	r0, #35	; 0x23
 80006ec:	f7ff fee6 	bl	80004bc <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80006f0:	20c1      	movs	r0, #193	; 0xc1
 80006f2:	f7ff fec9 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80006f6:	2010      	movs	r0, #16
 80006f8:	f7ff fee0 	bl	80004bc <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 80006fc:	20c5      	movs	r0, #197	; 0xc5
 80006fe:	f7ff fec3 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000702:	203e      	movs	r0, #62	; 0x3e
 8000704:	f7ff feda 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000708:	2028      	movs	r0, #40	; 0x28
 800070a:	f7ff fed7 	bl	80004bc <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800070e:	20c7      	movs	r0, #199	; 0xc7
 8000710:	f7ff feba 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000714:	2086      	movs	r0, #134	; 0x86
 8000716:	f7ff fed1 	bl	80004bc <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800071a:	2036      	movs	r0, #54	; 0x36
 800071c:	f7ff feb4 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000720:	2048      	movs	r0, #72	; 0x48
 8000722:	f7ff fecb 	bl	80004bc <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000726:	203a      	movs	r0, #58	; 0x3a
 8000728:	f7ff feae 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 800072c:	2055      	movs	r0, #85	; 0x55
 800072e:	f7ff fec5 	bl	80004bc <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000732:	20b1      	movs	r0, #177	; 0xb1
 8000734:	f7ff fea8 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff febf 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 800073e:	2018      	movs	r0, #24
 8000740:	f7ff febc 	bl	80004bc <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000744:	20b6      	movs	r0, #182	; 0xb6
 8000746:	f7ff fe9f 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800074a:	2008      	movs	r0, #8
 800074c:	f7ff feb6 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000750:	2082      	movs	r0, #130	; 0x82
 8000752:	f7ff feb3 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000756:	2027      	movs	r0, #39	; 0x27
 8000758:	f7ff feb0 	bl	80004bc <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 800075c:	20f2      	movs	r0, #242	; 0xf2
 800075e:	f7ff fe93 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff feaa 	bl	80004bc <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000768:	2026      	movs	r0, #38	; 0x26
 800076a:	f7ff fe8d 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff fea4 	bl	80004bc <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000774:	20e0      	movs	r0, #224	; 0xe0
 8000776:	f7ff fe87 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 800077a:	200f      	movs	r0, #15
 800077c:	f7ff fe9e 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000780:	2031      	movs	r0, #49	; 0x31
 8000782:	f7ff fe9b 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000786:	202b      	movs	r0, #43	; 0x2b
 8000788:	f7ff fe98 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800078c:	200c      	movs	r0, #12
 800078e:	f7ff fe95 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000792:	200e      	movs	r0, #14
 8000794:	f7ff fe92 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000798:	2008      	movs	r0, #8
 800079a:	f7ff fe8f 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800079e:	204e      	movs	r0, #78	; 0x4e
 80007a0:	f7ff fe8c 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80007a4:	20f1      	movs	r0, #241	; 0xf1
 80007a6:	f7ff fe89 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80007aa:	2037      	movs	r0, #55	; 0x37
 80007ac:	f7ff fe86 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80007b0:	2007      	movs	r0, #7
 80007b2:	f7ff fe83 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80007b6:	2010      	movs	r0, #16
 80007b8:	f7ff fe80 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80007bc:	2003      	movs	r0, #3
 80007be:	f7ff fe7d 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80007c2:	200e      	movs	r0, #14
 80007c4:	f7ff fe7a 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80007c8:	2009      	movs	r0, #9
 80007ca:	f7ff fe77 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff fe74 	bl	80004bc <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 80007d4:	20e1      	movs	r0, #225	; 0xe1
 80007d6:	f7ff fe57 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff fe6e 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80007e0:	200e      	movs	r0, #14
 80007e2:	f7ff fe6b 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 80007e6:	2014      	movs	r0, #20
 80007e8:	f7ff fe68 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f7ff fe65 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 80007f2:	2011      	movs	r0, #17
 80007f4:	f7ff fe62 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80007f8:	2007      	movs	r0, #7
 80007fa:	f7ff fe5f 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80007fe:	2031      	movs	r0, #49	; 0x31
 8000800:	f7ff fe5c 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000804:	20c1      	movs	r0, #193	; 0xc1
 8000806:	f7ff fe59 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800080a:	2048      	movs	r0, #72	; 0x48
 800080c:	f7ff fe56 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000810:	2008      	movs	r0, #8
 8000812:	f7ff fe53 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000816:	200f      	movs	r0, #15
 8000818:	f7ff fe50 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800081c:	200c      	movs	r0, #12
 800081e:	f7ff fe4d 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000822:	2031      	movs	r0, #49	; 0x31
 8000824:	f7ff fe4a 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000828:	2036      	movs	r0, #54	; 0x36
 800082a:	f7ff fe47 	bl	80004bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800082e:	200f      	movs	r0, #15
 8000830:	f7ff fe44 	bl	80004bc <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000834:	2011      	movs	r0, #17
 8000836:	f7ff fe27 	bl	8000488 <ILI9341_WriteCommand>
	systickDelayMs(100);
 800083a:	2064      	movs	r0, #100	; 0x64
 800083c:	f000 fc30 	bl	80010a0 <systickDelayMs>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000840:	2029      	movs	r0, #41	; 0x29
 8000842:	f7ff fe21 	bl	8000488 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff fea2 	bl	8000590 <ILI9341_SetRotation>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40013000 	.word	0x40013000

08000854 <ILI9341_DrawColorBurst>:

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000854:	b5b0      	push	{r4, r5, r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	80fb      	strh	r3, [r7, #6]
 8000860:	466b      	mov	r3, sp
 8000862:	461d      	mov	r5, r3
	uint32_t BufferSize = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000870:	d202      	bcs.n	8000878 <ILI9341_DrawColorBurst+0x24>
	{
		BufferSize = size;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
 8000876:	e002      	b.n	800087e <ILI9341_DrawColorBurst+0x2a>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000878:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	GPIO_SET(LCD_DC_PORT, LCD_DC_PIN, SET);
 800087e:	2201      	movs	r2, #1
 8000880:	2104      	movs	r1, #4
 8000882:	483c      	ldr	r0, [pc, #240]	; (8000974 <ILI9341_DrawColorBurst+0x120>)
 8000884:	f7ff fd04 	bl	8000290 <GPIO_SET>
	GPIO_SET(LCD_CS_PORT, LCD_CS_PIN, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2102      	movs	r1, #2
 800088c:	4839      	ldr	r0, [pc, #228]	; (8000974 <ILI9341_DrawColorBurst+0x120>)
 800088e:	f7ff fcff 	bl	8000290 <GPIO_SET>

	uint8_t chifted = color>>8;
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b29b      	uxth	r3, r3
 8000898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 800089c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800089e:	4623      	mov	r3, r4
 80008a0:	3b01      	subs	r3, #1
 80008a2:	61fb      	str	r3, [r7, #28]
 80008a4:	4620      	mov	r0, r4
 80008a6:	f04f 0100 	mov.w	r1, #0
 80008aa:	f04f 0200 	mov.w	r2, #0
 80008ae:	f04f 0300 	mov.w	r3, #0
 80008b2:	00cb      	lsls	r3, r1, #3
 80008b4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008b8:	00c2      	lsls	r2, r0, #3
 80008ba:	4620      	mov	r0, r4
 80008bc:	f04f 0100 	mov.w	r1, #0
 80008c0:	f04f 0200 	mov.w	r2, #0
 80008c4:	f04f 0300 	mov.w	r3, #0
 80008c8:	00cb      	lsls	r3, r1, #3
 80008ca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008ce:	00c2      	lsls	r2, r0, #3
 80008d0:	1de3      	adds	r3, r4, #7
 80008d2:	08db      	lsrs	r3, r3, #3
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	ebad 0d03 	sub.w	sp, sp, r3
 80008da:	466b      	mov	r3, sp
 80008dc:	3300      	adds	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80008e4:	e00e      	b.n	8000904 <ILI9341_DrawColorBurst+0xb0>
	{
		BurstBuffer[j] = chifted;
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ea:	4413      	add	r3, r2
 80008ec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80008f0:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80008f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f4:	3301      	adds	r3, #1
 80008f6:	88fa      	ldrh	r2, [r7, #6]
 80008f8:	b2d1      	uxtb	r1, r2
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80008fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000900:	3302      	adds	r3, #2
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
 8000904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	429a      	cmp	r2, r3
 800090a:	d3ec      	bcc.n	80008e6 <ILI9341_DrawColorBurst+0x92>
	}

	uint32_t SendingSize = size * 2;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000920:	fbb3 f2f2 	udiv	r2, r3, r2
 8000924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000926:	fb01 f202 	mul.w	r2, r1, r2
 800092a:	1a9b      	subs	r3, r3, r2
 800092c:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00f      	beq.n	8000954 <ILI9341_DrawColorBurst+0x100>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000938:	e008      	b.n	800094c <ILI9341_DrawColorBurst+0xf8>
		{
			spi_transmit(SPI1,BurstBuffer,BufferSize);
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <ILI9341_DrawColorBurst+0x124>)
 8000942:	f000 fad7 	bl	8000ef4 <spi_transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000948:	3301      	adds	r3, #1
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800094c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	429a      	cmp	r2, r3
 8000952:	d3f2      	bcc.n	800093a <ILI9341_DrawColorBurst+0xe6>
		}
	}
	spi_transmit(SPI1,BurstBuffer,RemainderFromBlock);
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	4619      	mov	r1, r3
 800095a:	4807      	ldr	r0, [pc, #28]	; (8000978 <ILI9341_DrawColorBurst+0x124>)
 800095c:	f000 faca 	bl	8000ef4 <spi_transmit>
	GPIO_SET(LCD_CS_PORT, LCD_CS_PIN, SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2102      	movs	r1, #2
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <ILI9341_DrawColorBurst+0x120>)
 8000966:	f7ff fc93 	bl	8000290 <GPIO_SET>
 800096a:	46ad      	mov	sp, r5
}
 800096c:	bf00      	nop
 800096e:	3730      	adds	r7, #48	; 0x30
 8000970:	46bd      	mov	sp, r7
 8000972:	bdb0      	pop	{r4, r5, r7, pc}
 8000974:	40020800 	.word	0x40020800
 8000978:	40013000 	.word	0x40013000

0800097c <ILI9341_SetAddress>:
void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	4604      	mov	r4, r0
 8000984:	4608      	mov	r0, r1
 8000986:	4611      	mov	r1, r2
 8000988:	461a      	mov	r2, r3
 800098a:	4623      	mov	r3, r4
 800098c:	80fb      	strh	r3, [r7, #6]
 800098e:	4603      	mov	r3, r0
 8000990:	80bb      	strh	r3, [r7, #4]
 8000992:	460b      	mov	r3, r1
 8000994:	807b      	strh	r3, [r7, #2]
 8000996:	4613      	mov	r3, r2
 8000998:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	b29b      	uxth	r3, r3
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80009aa:	887b      	ldrh	r3, [r7, #2]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80009b4:	887b      	ldrh	r3, [r7, #2]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80009ba:	202a      	movs	r0, #42	; 0x2a
 80009bc:	f7ff fd64 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2104      	movs	r1, #4
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fd96 	bl	80004f8 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80009cc:	88bb      	ldrh	r3, [r7, #4]
 80009ce:	0a1b      	lsrs	r3, r3, #8
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80009d6:	88bb      	ldrh	r3, [r7, #4]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80009dc:	883b      	ldrh	r3, [r7, #0]
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80009e6:	883b      	ldrh	r3, [r7, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80009ec:	202b      	movs	r0, #43	; 0x2b
 80009ee:	f7ff fd4b 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	2104      	movs	r1, #4
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fd7d 	bl	80004f8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80009fe:	202c      	movs	r0, #44	; 0x2c
 8000a00:	f7ff fd42 	bl	8000488 <ILI9341_WriteCommand>
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd90      	pop	{r4, r7, pc}

08000a0c <ILI9341_FillScreen>:
void ILI9341_FillScreen(uint16_t color)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <ILI9341_FillScreen+0x44>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <ILI9341_FillScreen+0x48>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff ffa9 	bl	800097c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <ILI9341_FillScreen+0x44>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <ILI9341_FillScreen+0x48>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	fb03 f302 	mul.w	r3, r3, r2
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff06 	bl	8000854 <ILI9341_DrawColorBurst>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000002 	.word	0x20000002
 8000a54:	20000000 	.word	0x20000000

08000a58 <ILI9341_DrawPixel>:
void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
 8000a62:	460b      	mov	r3, r1
 8000a64:	80bb      	strh	r3, [r7, #4]
 8000a66:	4613      	mov	r3, r2
 8000a68:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <ILI9341_DrawPixel+0xc4>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	88fa      	ldrh	r2, [r7, #6]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d24d      	bcs.n	8000b12 <ILI9341_DrawPixel+0xba>
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <ILI9341_DrawPixel+0xc8>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	88ba      	ldrh	r2, [r7, #4]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d247      	bcs.n	8000b12 <ILI9341_DrawPixel+0xba>

	/* We can just transform 8 bit one time */
	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	753b      	strb	r3, [r7, #20]
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	757b      	strb	r3, [r7, #21]
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	3301      	adds	r3, #1
 8000a96:	121b      	asrs	r3, r3, #8
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	75bb      	strb	r3, [r7, #22]
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	743b      	strb	r3, [r7, #16]
 8000ab0:	88bb      	ldrh	r3, [r7, #4]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	747b      	strb	r3, [r7, #17]
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	121b      	asrs	r3, r3, #8
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	74bb      	strb	r3, [r7, #18]
 8000ac0:	88bb      	ldrh	r3, [r7, #4]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	733b      	strb	r3, [r7, #12]
 8000ad4:	887b      	ldrh	r3, [r7, #2]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000ada:	202a      	movs	r0, #42	; 0x2a
 8000adc:	f7ff fcd4 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fd06 	bl	80004f8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000aec:	202b      	movs	r0, #43	; 0x2b
 8000aee:	f7ff fccb 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	2104      	movs	r1, #4
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fcfd 	bl	80004f8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000afe:	202c      	movs	r0, #44	; 0x2c
 8000b00:	f7ff fcc2 	bl	8000488 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fcf4 	bl	80004f8 <ILI9341_WriteBuffer>
 8000b10:	e000      	b.n	8000b14 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000b12:	bf00      	nop
}
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000002 	.word	0x20000002
 8000b20:	20000000 	.word	0x20000000

08000b24 <ILI9341_DrawFilledCircle>:
}



void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b08b      	sub	sp, #44	; 0x2c
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	4608      	mov	r0, r1
 8000b2e:	4611      	mov	r1, r2
 8000b30:	461a      	mov	r2, r3
 8000b32:	4623      	mov	r3, r4
 8000b34:	80fb      	strh	r3, [r7, #6]
 8000b36:	4603      	mov	r3, r0
 8000b38:	80bb      	strh	r3, [r7, #4]
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	807b      	strh	r3, [r7, #2]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	803b      	strh	r3, [r7, #0]

	int x = radius;
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 8000b4a:	887b      	ldrh	r3, [r7, #2]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	f1c3 0301 	rsb	r3, r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8000b5c:	e061      	b.n	8000c22 <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	e018      	b.n	8000b9a <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	b298      	uxth	r0, r3
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	88bb      	ldrh	r3, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	883a      	ldrh	r2, [r7, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f7ff ff6d 	bl	8000a58 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	b298      	uxth	r0, r3
 8000b82:	6a3b      	ldr	r3, [r7, #32]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	88ba      	ldrh	r2, [r7, #4]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	883a      	ldrh	r2, [r7, #0]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f7ff ff62 	bl	8000a58 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	3301      	adds	r3, #1
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	88fa      	ldrh	r2, [r7, #6]
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	4413      	add	r3, r2
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	dde0      	ble.n	8000b68 <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 8000ba6:	88fa      	ldrh	r2, [r7, #6]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	e018      	b.n	8000be2 <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	b298      	uxth	r0, r3
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	88bb      	ldrh	r3, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	883a      	ldrh	r2, [r7, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f7ff ff49 	bl	8000a58 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	b298      	uxth	r0, r3
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	88ba      	ldrh	r2, [r7, #4]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	883a      	ldrh	r2, [r7, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f7ff ff3e 	bl	8000a58 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	88fa      	ldrh	r2, [r7, #6]
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	4413      	add	r3, r2
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	dde0      	ble.n	8000bb0 <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 8000bee:	6a3b      	ldr	r3, [r7, #32]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	3302      	adds	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005a      	lsls	r2, r3, #1
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	4413      	add	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	dd09      	ble.n	8000c22 <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	3b01      	subs	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	4413      	add	r3, r2
 8000c1a:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	3302      	adds	r3, #2
 8000c20:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8000c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	da99      	bge.n	8000b5e <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	bf00      	nop
 8000c2e:	372c      	adds	r7, #44	; 0x2c
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd90      	pop	{r4, r7, pc}

08000c34 <spi_gpio_init>:

//PA9 -> Slave Select


void spi_gpio_init(SPI_TypeDef* SPI)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

	switch ((uint32_t) SPI)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a78      	ldr	r2, [pc, #480]	; (8000e20 <spi_gpio_init+0x1ec>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d075      	beq.n	8000d30 <spi_gpio_init+0xfc>
 8000c44:	4a77      	ldr	r2, [pc, #476]	; (8000e24 <spi_gpio_init+0x1f0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	f040 80e4 	bne.w	8000e14 <spi_gpio_init+0x1e0>
	{
		case (uint32_t) SPI1 :
			/* SPI1 Use PA5->CLK , PA6->MISO , PA7->MOSI */
			/*Enable clock access to GPIOA*/
			RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000c4c:	4b76      	ldr	r3, [pc, #472]	; (8000e28 <spi_gpio_init+0x1f4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a75      	ldr	r2, [pc, #468]	; (8000e28 <spi_gpio_init+0x1f4>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30

			/*Set PA5,PA6,PA7 mode to alternate function*/
			/*PA5*/
			GPIOA->MODER &=~ (PIN5 * PIN5);
 8000c58:	4b74      	ldr	r3, [pc, #464]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a73      	ldr	r2, [pc, #460]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c62:	6013      	str	r3, [r2, #0]
			GPIOA->MODER |=  (PIN5 * PIN5) << 1;
 8000c64:	4b71      	ldr	r3, [pc, #452]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a70      	ldr	r2, [pc, #448]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000c6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c6e:	6013      	str	r3, [r2, #0]

			/*PA6*/
			GPIOA->MODER &=~ (PIN6 * PIN6);
 8000c70:	4b6e      	ldr	r3, [pc, #440]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a6d      	ldr	r2, [pc, #436]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c7a:	6013      	str	r3, [r2, #0]
			GPIOA->MODER |=  (PIN6 * PIN6) << 1;
 8000c7c:	4b6b      	ldr	r3, [pc, #428]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a6a      	ldr	r2, [pc, #424]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000c82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c86:	6013      	str	r3, [r2, #0]

			/*PA7*/
			GPIOA->MODER &=~ (PIN7 * PIN7);
 8000c88:	4b68      	ldr	r3, [pc, #416]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a67      	ldr	r2, [pc, #412]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c92:	6013      	str	r3, [r2, #0]
			GPIOA->MODER |=  (PIN7 * PIN7) << 1;
 8000c94:	4b65      	ldr	r3, [pc, #404]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a64      	ldr	r2, [pc, #400]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c9e:	6013      	str	r3, [r2, #0]


			/*Set PA5,PA6,PA7 alternate function type to SPI1*/
			/*PA5*/
			GPIOA->AFR[0] |=  (1U<<20);
 8000ca0:	4b62      	ldr	r3, [pc, #392]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000ca2:	6a1b      	ldr	r3, [r3, #32]
 8000ca4:	4a61      	ldr	r2, [pc, #388]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000caa:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] &= ~(1U<<21);
 8000cac:	4b5f      	ldr	r3, [pc, #380]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000cae:	6a1b      	ldr	r3, [r3, #32]
 8000cb0:	4a5e      	ldr	r2, [pc, #376]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000cb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000cb6:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] |=  (1U<<22);
 8000cb8:	4b5c      	ldr	r3, [pc, #368]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000cba:	6a1b      	ldr	r3, [r3, #32]
 8000cbc:	4a5b      	ldr	r2, [pc, #364]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000cbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc2:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] &= ~(1U<<23);
 8000cc4:	4b59      	ldr	r3, [pc, #356]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000cc6:	6a1b      	ldr	r3, [r3, #32]
 8000cc8:	4a58      	ldr	r2, [pc, #352]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000cca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000cce:	6213      	str	r3, [r2, #32]

			/*PA6*/
			GPIOA->AFR[0] |=  (1U<<24);
 8000cd0:	4b56      	ldr	r3, [pc, #344]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	4a55      	ldr	r2, [pc, #340]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cda:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] &= ~(1U<<25);
 8000cdc:	4b53      	ldr	r3, [pc, #332]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000cde:	6a1b      	ldr	r3, [r3, #32]
 8000ce0:	4a52      	ldr	r2, [pc, #328]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000ce2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000ce6:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] |=  (1U<<26);
 8000ce8:	4b50      	ldr	r3, [pc, #320]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000cea:	6a1b      	ldr	r3, [r3, #32]
 8000cec:	4a4f      	ldr	r2, [pc, #316]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000cee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cf2:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] &= ~(1U<<27);
 8000cf4:	4b4d      	ldr	r3, [pc, #308]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	4a4c      	ldr	r2, [pc, #304]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000cfa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000cfe:	6213      	str	r3, [r2, #32]

			/*PA7*/
			GPIOA->AFR[0] |=  (1U<<28);
 8000d00:	4b4a      	ldr	r3, [pc, #296]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	4a49      	ldr	r2, [pc, #292]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] &= ~(1U<<29);
 8000d0c:	4b47      	ldr	r3, [pc, #284]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000d0e:	6a1b      	ldr	r3, [r3, #32]
 8000d10:	4a46      	ldr	r2, [pc, #280]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000d12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000d16:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] |=  (1U<<30);
 8000d18:	4b44      	ldr	r3, [pc, #272]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	4a43      	ldr	r2, [pc, #268]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000d1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d22:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] &= ~(1U<<31);
 8000d24:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	4a40      	ldr	r2, [pc, #256]	; (8000e2c <spi_gpio_init+0x1f8>)
 8000d2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d2e:	6213      	str	r3, [r2, #32]
		case (uint32_t) SPI2:
			/* SPI2 Use PB13->CLK , PB14->MISO , PB15->MOSI */
			/*Enable clock access to GPIOB*/
			RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000d30:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <spi_gpio_init+0x1f4>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a3c      	ldr	r2, [pc, #240]	; (8000e28 <spi_gpio_init+0x1f4>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30

			/*Set PB13,PB14,PB15 mode to alternate function*/
			/*PB13*/
			GPIOB->MODER &=~ (PIN13 * PIN13);
 8000d3c:	4b3c      	ldr	r3, [pc, #240]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a3b      	ldr	r2, [pc, #236]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000d46:	6013      	str	r3, [r2, #0]
			GPIOB->MODER |=  (PIN13 * PIN13) << 1;
 8000d48:	4b39      	ldr	r3, [pc, #228]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a38      	ldr	r2, [pc, #224]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d52:	6013      	str	r3, [r2, #0]

			/*PB14*/
			GPIOB->MODER &=~ (PIN14 * PIN14);
 8000d54:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a35      	ldr	r2, [pc, #212]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	6013      	str	r3, [r2, #0]
			GPIOB->MODER |=  (PIN14 * PIN14) << 1;
 8000d60:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a32      	ldr	r2, [pc, #200]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d6a:	6013      	str	r3, [r2, #0]

			/*PB15*/
			GPIOB->MODER &=~ (PIN15 * PIN15);
 8000d6c:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a2f      	ldr	r2, [pc, #188]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000d76:	6013      	str	r3, [r2, #0]
			GPIOB->MODER |=  (PIN15 * PIN15) << 1;
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a2c      	ldr	r2, [pc, #176]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d82:	6013      	str	r3, [r2, #0]


			/*Set PB13,PB14,PB15 alternate function type to SPI1*/
			/*PB13*/
			GPIOB->AFR[1] |=  (1U<<20);
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	4a29      	ldr	r2, [pc, #164]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d8e:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOB->AFR[1] &= ~(1U<<21);
 8000d90:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000d9a:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOB->AFR[1] |=  (1U<<22);
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da0:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000da2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000da6:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOB->AFR[1] &= ~(1U<<23);
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000dae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000db2:	6253      	str	r3, [r2, #36]	; 0x24

			/*PB14*/
			GPIOB->AFR[1] |=  (1U<<24);
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dbe:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOB->AFR[1] &= ~(1U<<25);
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc4:	4a1a      	ldr	r2, [pc, #104]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000dc6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000dca:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOB->AFR[1] |=  (1U<<26);
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd0:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000dd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dd6:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOB->AFR[1] &= ~(1U<<27);
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000dde:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000de2:	6253      	str	r3, [r2, #36]	; 0x24

			/*PB15*/
			GPIOB->AFR[1] |=  (1U<<28);
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dee:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOB->AFR[1] &= ~(1U<<29);
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000df6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000dfa:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOB->AFR[1] |=  (1U<<30);
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e06:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOB->AFR[1] &= ~(1U<<31);
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <spi_gpio_init+0x1fc>)
 8000e0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e12:	6253      	str	r3, [r2, #36]	; 0x24
	}
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40003800 	.word	0x40003800
 8000e24:	40013000 	.word	0x40013000
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020400 	.word	0x40020400

08000e34 <spi_config>:

void spi_config(SPI_TypeDef* SPI)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	switch ((uint32_t) SPI)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ee8 <spi_config+0xb4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d008      	beq.n	8000e56 <spi_config+0x22>
 8000e44:	4a29      	ldr	r2, [pc, #164]	; (8000eec <spi_config+0xb8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d10b      	bne.n	8000e62 <spi_config+0x2e>
	{
		case (uint32_t) SPI1:
			/*Enable clock access to SPI1 module*/
			RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000e4a:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <spi_config+0xbc>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a28      	ldr	r2, [pc, #160]	; (8000ef0 <spi_config+0xbc>)
 8000e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
		case (uint32_t) SPI2:
			/*Enable clock access to SPI1 module*/
			RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <spi_config+0xbc>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a25      	ldr	r2, [pc, #148]	; (8000ef0 <spi_config+0xbc>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40

	}

	/*Set clock to fPCLK/4*/
	SPI->CR1 |= SPI_CR1_BR_0;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f043 0208 	orr.w	r2, r3, #8
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]

	/*Set CPOL to 1 and CPHA to 1*/
	SPI->CR1 |= SPI_CR1_CPHA;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f043 0201 	orr.w	r2, r3, #1
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]
	SPI->CR1 |= SPI_CR1_CPOL;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f043 0202 	orr.w	r2, r3, #2
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	601a      	str	r2, [r3, #0]

	/*Enable full duplex*/
	SPI->CR1 &=~ SPI_CR1_RXONLY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	601a      	str	r2, [r3, #0]

	/*Set MSB first*/
	SPI->CR1 &=~ SPI_CR1_LSBFIRST;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]

	/*Set mode to MASTER*/
	SPI->CR1 |= SPI_CR1_MSTR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f043 0204 	orr.w	r2, r3, #4
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]

	/*Set 8 bit data mode*/
	SPI->CR1 &=~ SPI_CR1_DFF;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]

	/*Select software slave management by setting SSM=1 and SSI=1*/
	SPI->CR1 |= SPI_CR1_SSM;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	601a      	str	r2, [r3, #0]
	SPI->CR1 |= SPI_CR1_SSI;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	601a      	str	r2, [r3, #0]

	/*Enable SPI module*/
	SPI->CR1 |= SPI_CR1_SPE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]


}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40003800 	.word	0x40003800
 8000eec:	40013000 	.word	0x40013000
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <spi_transmit>:

void spi_transmit(SPI_TypeDef* SPI, uint8_t *data,uint32_t size)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	uint32_t i=0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
	uint8_t temp;

	while(i<size)
 8000f04:	e010      	b.n	8000f28 <spi_transmit+0x34>
	{
		/*Wait until TXE is set*/
		while(!(SPI->SR & (SPI_SR_TXE))){}
 8000f06:	bf00      	nop
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f9      	beq.n	8000f08 <spi_transmit+0x14>

		/*Write the data to the data register*/
		SPI->DR = data[i];
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	4413      	add	r3, r2
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	60da      	str	r2, [r3, #12]
		i++;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
	while(i<size)
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d3ea      	bcc.n	8000f06 <spi_transmit+0x12>
	}
	/*Wait until TXE is set*/
	while(!(SPI->SR & (SPI_SR_TXE))){}
 8000f30:	bf00      	nop
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f9      	beq.n	8000f32 <spi_transmit+0x3e>

	/*Wait for BUSY flag to reset*/
	while((SPI->SR & (SPI_SR_BSY))){}
 8000f3e:	bf00      	nop
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f9      	bne.n	8000f40 <spi_transmit+0x4c>
//	temp = SPI->DR;
//	SPI1->DR &=~ SPI_SR_OVR;
//	temp = SPI->SR;
//	SPI1->SR = 0;
//	SPI1->DR &=~ SPI_SR_OVR;
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e00a      	b.n	8000f82 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f6c:	f3af 8000 	nop.w
 8000f70:	4601      	mov	r1, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	60ba      	str	r2, [r7, #8]
 8000f78:	b2ca      	uxtb	r2, r1
 8000f7a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	dbf0      	blt.n	8000f6c <_read+0x12>
	}

return len;
 8000f8a:	687b      	ldr	r3, [r7, #4]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e009      	b.n	8000fba <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	60ba      	str	r2, [r7, #8]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f8f8 	bl	80011a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	dbf1      	blt.n	8000fa6 <_write+0x12>
	}
	return len;
 8000fc2:	687b      	ldr	r3, [r7, #4]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_close>:

int _close(int file)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	return -1;
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ff4:	605a      	str	r2, [r3, #4]
	return 0;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_isatty>:

int _isatty(int file)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	return 1;
 800100c:	2301      	movs	r3, #1
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800101a:	b480      	push	{r7}
 800101c:	b085      	sub	sp, #20
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
	return 0;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	; (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f000 f928 	bl	80012b8 <__errno>
 8001068:	4603      	mov	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20020000 	.word	0x20020000
 8001094:	00000400 	.word	0x00000400
 8001098:	20000084 	.word	0x20000084
 800109c:	200000a0 	.word	0x200000a0

080010a0 <systickDelayMs>:
 *      Author: s94009880225
 */

#include "systick.h"
void systickDelayMs(int delay)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD	= SYST_LOAD_VAL;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <systickDelayMs+0x50>)
 80010aa:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80010ae:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register */
	SysTick->VAL = 0;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <systickDelayMs+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]

	/*Enable systick and select internal clk src*/
	SysTick->CTRL = SYST_CSR_ENABLE | SYST_CSR_CLKSRC;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <systickDelayMs+0x50>)
 80010b8:	2205      	movs	r2, #5
 80010ba:	601a      	str	r2, [r3, #0]

	for(int i=0; i<delay ; i++){
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e009      	b.n	80010d6 <systickDelayMs+0x36>

		/*Wait until the COUNTFLAG is set*/

		while((SysTick->CTRL &  SYST_CSR_COUNTFLAG) == 0){}
 80010c2:	bf00      	nop
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <systickDelayMs+0x50>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f9      	beq.n	80010c4 <systickDelayMs+0x24>
	for(int i=0; i<delay ; i++){
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3301      	adds	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	dbf1      	blt.n	80010c2 <systickDelayMs+0x22>

	}

	SysTick->CTRL = 0;
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <systickDelayMs+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]

}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <SysTick_Handler>:
	SysTick->CTRL  |= CTRL_TICKINT;
}

/* If use Systick interrupt, it will run the following answer */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
	for(int i = 0;i<100000;i++){}
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	e002      	b.n	8001106 <SysTick_Handler+0x12>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <SysTick_Handler+0x50>)
 800110a:	4293      	cmp	r3, r2
 800110c:	ddf8      	ble.n	8001100 <SysTick_Handler+0xc>
	GPIO_SET(GPIOD,PIN13,SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <SysTick_Handler+0x54>)
 8001116:	f7ff f8bb 	bl	8000290 <GPIO_SET>
	for(int i = 0;i<100000;i++){}
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	e002      	b.n	8001126 <SysTick_Handler+0x32>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	4a06      	ldr	r2, [pc, #24]	; (8001144 <SysTick_Handler+0x50>)
 800112a:	4293      	cmp	r3, r2
 800112c:	ddf8      	ble.n	8001120 <SysTick_Handler+0x2c>
	GPIO_SET(GPIOD,PIN13,RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <SysTick_Handler+0x54>)
 8001136:	f7ff f8ab 	bl	8000290 <GPIO_SET>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	0001869f 	.word	0x0001869f
 8001148:	40020c00 	.word	0x40020c00

0800114c <TIM2_IRQHandler>:
	 NVIC_EnableIRQ(TIM2_IRQn);
}


void TIM2_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	for(int i = 0;i<100000;i++){}
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	e002      	b.n	800115e <TIM2_IRQHandler+0x12>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3301      	adds	r3, #1
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <TIM2_IRQHandler+0x50>)
 8001162:	4293      	cmp	r3, r2
 8001164:	ddf8      	ble.n	8001158 <TIM2_IRQHandler+0xc>
	GPIO_SET(GPIOD,PIN13,SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <TIM2_IRQHandler+0x54>)
 800116e:	f7ff f88f 	bl	8000290 <GPIO_SET>
	for(int i = 0;i<100000;i++){}
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	e002      	b.n	800117e <TIM2_IRQHandler+0x32>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	4a06      	ldr	r2, [pc, #24]	; (800119c <TIM2_IRQHandler+0x50>)
 8001182:	4293      	cmp	r3, r2
 8001184:	ddf8      	ble.n	8001178 <TIM2_IRQHandler+0x2c>
	GPIO_SET(GPIOD,PIN13,RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <TIM2_IRQHandler+0x54>)
 800118e:	f7ff f87f 	bl	8000290 <GPIO_SET>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	0001869f 	.word	0x0001869f
 80011a0:	40020c00 	.word	0x40020c00

080011a4 <__io_putchar>:

#define BaudRate 115200

// For printf
int __io_putchar(int ch)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	uart_write(USART2,ch);
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <__io_putchar+0x1c>)
 80011b0:	f000 f808 	bl	80011c4 <uart_write>
	return ch;
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40004400 	.word	0x40004400

080011c4 <uart_write>:

		/*Enable uart module*/
		USART->CR1 |=  USART_CR1_UE;
}
void uart_write(USART_TypeDef * USART, int ch)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  /*Make sure the transmit data register is empty*/
	while(!(USART->SR & USART_SR_TXE)){}
 80011ce:	bf00      	nop
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f9      	beq.n	80011d0 <uart_write+0xc>

  /*Write to transmit data register*/
	USART->DR	=  (ch & 0xFF);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	605a      	str	r2, [r3, #4]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <USART2_IRQHandler>:
	USART2->CR3 |= USART_CR3_DMAT;

	/*DMA Interrupt enable in NVIC*/
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
}
void USART2_IRQHandler(void){
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	if(USART2->SR & USART_SR_RXNE)
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <USART2_IRQHandler+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
	{
	}
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40004400 	.word	0x40004400

08001208 <dma_callback>:
static void dma_callback(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	GPIO_SET(GPIOD,PIN13,SET);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001212:	4809      	ldr	r0, [pc, #36]	; (8001238 <dma_callback+0x30>)
 8001214:	f7ff f83c 	bl	8000290 <GPIO_SET>
	systickDelayMs(500);
 8001218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800121c:	f7ff ff40 	bl	80010a0 <systickDelayMs>
	GPIO_SET(GPIOD,PIN13,RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001226:	4804      	ldr	r0, [pc, #16]	; (8001238 <dma_callback+0x30>)
 8001228:	f7ff f832 	bl	8000290 <GPIO_SET>
	systickDelayMs(500);
 800122c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001230:	f7ff ff36 	bl	80010a0 <systickDelayMs>
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40020c00 	.word	0x40020c00

0800123c <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	/*Check for transfer complete interrupt*/
	if(DMA1->HISR & DMA_HISR_TCIF6)
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <DMA1_Stream6_IRQHandler+0x24>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d007      	beq.n	800125c <DMA1_Stream6_IRQHandler+0x20>
	{
		/*Clear flag*/
		DMA1->HIFCR |= DMA_HIFCR_CTCIF6;
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <DMA1_Stream6_IRQHandler+0x24>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4a03      	ldr	r2, [pc, #12]	; (8001260 <DMA1_Stream6_IRQHandler+0x24>)
 8001252:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001256:	60d3      	str	r3, [r2, #12]

		/*Do something*/
		dma_callback();
 8001258:	f7ff ffd6 	bl	8001208 <dma_callback>
	}
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40026000 	.word	0x40026000

08001264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800126e:	490d      	ldr	r1, [pc, #52]	; (80012a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <LoopForever+0xe>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001284:	4c0a      	ldr	r4, [pc, #40]	; (80012b0 <LoopForever+0x16>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001292:	f000 f817 	bl	80012c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001296:	f7ff f8c1 	bl	800041c <main>

0800129a <LoopForever>:

LoopForever:
    b LoopForever
 800129a:	e7fe      	b.n	800129a <LoopForever>
  ldr   r0, =_estack
 800129c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012a8:	080022ac 	.word	0x080022ac
  ldr r2, =_sbss
 80012ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012b0:	200000a0 	.word	0x200000a0

080012b4 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <BusFault_Handler>
	...

080012b8 <__errno>:
 80012b8:	4b01      	ldr	r3, [pc, #4]	; (80012c0 <__errno+0x8>)
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000004 	.word	0x20000004

080012c4 <__libc_init_array>:
 80012c4:	b570      	push	{r4, r5, r6, lr}
 80012c6:	4d0d      	ldr	r5, [pc, #52]	; (80012fc <__libc_init_array+0x38>)
 80012c8:	4c0d      	ldr	r4, [pc, #52]	; (8001300 <__libc_init_array+0x3c>)
 80012ca:	1b64      	subs	r4, r4, r5
 80012cc:	10a4      	asrs	r4, r4, #2
 80012ce:	2600      	movs	r6, #0
 80012d0:	42a6      	cmp	r6, r4
 80012d2:	d109      	bne.n	80012e8 <__libc_init_array+0x24>
 80012d4:	4d0b      	ldr	r5, [pc, #44]	; (8001304 <__libc_init_array+0x40>)
 80012d6:	4c0c      	ldr	r4, [pc, #48]	; (8001308 <__libc_init_array+0x44>)
 80012d8:	f000 ff76 	bl	80021c8 <_init>
 80012dc:	1b64      	subs	r4, r4, r5
 80012de:	10a4      	asrs	r4, r4, #2
 80012e0:	2600      	movs	r6, #0
 80012e2:	42a6      	cmp	r6, r4
 80012e4:	d105      	bne.n	80012f2 <__libc_init_array+0x2e>
 80012e6:	bd70      	pop	{r4, r5, r6, pc}
 80012e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80012ec:	4798      	blx	r3
 80012ee:	3601      	adds	r6, #1
 80012f0:	e7ee      	b.n	80012d0 <__libc_init_array+0xc>
 80012f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80012f6:	4798      	blx	r3
 80012f8:	3601      	adds	r6, #1
 80012fa:	e7f2      	b.n	80012e2 <__libc_init_array+0x1e>
 80012fc:	080022a4 	.word	0x080022a4
 8001300:	080022a4 	.word	0x080022a4
 8001304:	080022a4 	.word	0x080022a4
 8001308:	080022a8 	.word	0x080022a8

0800130c <memset>:
 800130c:	4402      	add	r2, r0
 800130e:	4603      	mov	r3, r0
 8001310:	4293      	cmp	r3, r2
 8001312:	d100      	bne.n	8001316 <memset+0xa>
 8001314:	4770      	bx	lr
 8001316:	f803 1b01 	strb.w	r1, [r3], #1
 800131a:	e7f9      	b.n	8001310 <memset+0x4>

0800131c <iprintf>:
 800131c:	b40f      	push	{r0, r1, r2, r3}
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <iprintf+0x2c>)
 8001320:	b513      	push	{r0, r1, r4, lr}
 8001322:	681c      	ldr	r4, [r3, #0]
 8001324:	b124      	cbz	r4, 8001330 <iprintf+0x14>
 8001326:	69a3      	ldr	r3, [r4, #24]
 8001328:	b913      	cbnz	r3, 8001330 <iprintf+0x14>
 800132a:	4620      	mov	r0, r4
 800132c:	f000 f866 	bl	80013fc <__sinit>
 8001330:	ab05      	add	r3, sp, #20
 8001332:	9a04      	ldr	r2, [sp, #16]
 8001334:	68a1      	ldr	r1, [r4, #8]
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	4620      	mov	r0, r4
 800133a:	f000 f983 	bl	8001644 <_vfiprintf_r>
 800133e:	b002      	add	sp, #8
 8001340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001344:	b004      	add	sp, #16
 8001346:	4770      	bx	lr
 8001348:	20000004 	.word	0x20000004

0800134c <std>:
 800134c:	2300      	movs	r3, #0
 800134e:	b510      	push	{r4, lr}
 8001350:	4604      	mov	r4, r0
 8001352:	e9c0 3300 	strd	r3, r3, [r0]
 8001356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800135a:	6083      	str	r3, [r0, #8]
 800135c:	8181      	strh	r1, [r0, #12]
 800135e:	6643      	str	r3, [r0, #100]	; 0x64
 8001360:	81c2      	strh	r2, [r0, #14]
 8001362:	6183      	str	r3, [r0, #24]
 8001364:	4619      	mov	r1, r3
 8001366:	2208      	movs	r2, #8
 8001368:	305c      	adds	r0, #92	; 0x5c
 800136a:	f7ff ffcf 	bl	800130c <memset>
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <std+0x38>)
 8001370:	6263      	str	r3, [r4, #36]	; 0x24
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <std+0x3c>)
 8001374:	62a3      	str	r3, [r4, #40]	; 0x28
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <std+0x40>)
 8001378:	62e3      	str	r3, [r4, #44]	; 0x2c
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <std+0x44>)
 800137c:	6224      	str	r4, [r4, #32]
 800137e:	6323      	str	r3, [r4, #48]	; 0x30
 8001380:	bd10      	pop	{r4, pc}
 8001382:	bf00      	nop
 8001384:	08001bed 	.word	0x08001bed
 8001388:	08001c0f 	.word	0x08001c0f
 800138c:	08001c47 	.word	0x08001c47
 8001390:	08001c6b 	.word	0x08001c6b

08001394 <_cleanup_r>:
 8001394:	4901      	ldr	r1, [pc, #4]	; (800139c <_cleanup_r+0x8>)
 8001396:	f000 b8af 	b.w	80014f8 <_fwalk_reent>
 800139a:	bf00      	nop
 800139c:	08001f45 	.word	0x08001f45

080013a0 <__sfmoreglue>:
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	1e4a      	subs	r2, r1, #1
 80013a4:	2568      	movs	r5, #104	; 0x68
 80013a6:	4355      	muls	r5, r2
 80013a8:	460e      	mov	r6, r1
 80013aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80013ae:	f000 f8c5 	bl	800153c <_malloc_r>
 80013b2:	4604      	mov	r4, r0
 80013b4:	b140      	cbz	r0, 80013c8 <__sfmoreglue+0x28>
 80013b6:	2100      	movs	r1, #0
 80013b8:	e9c0 1600 	strd	r1, r6, [r0]
 80013bc:	300c      	adds	r0, #12
 80013be:	60a0      	str	r0, [r4, #8]
 80013c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80013c4:	f7ff ffa2 	bl	800130c <memset>
 80013c8:	4620      	mov	r0, r4
 80013ca:	bd70      	pop	{r4, r5, r6, pc}

080013cc <__sfp_lock_acquire>:
 80013cc:	4801      	ldr	r0, [pc, #4]	; (80013d4 <__sfp_lock_acquire+0x8>)
 80013ce:	f000 b8b3 	b.w	8001538 <__retarget_lock_acquire_recursive>
 80013d2:	bf00      	nop
 80013d4:	20000098 	.word	0x20000098

080013d8 <__sfp_lock_release>:
 80013d8:	4801      	ldr	r0, [pc, #4]	; (80013e0 <__sfp_lock_release+0x8>)
 80013da:	f000 b8ae 	b.w	800153a <__retarget_lock_release_recursive>
 80013de:	bf00      	nop
 80013e0:	20000098 	.word	0x20000098

080013e4 <__sinit_lock_acquire>:
 80013e4:	4801      	ldr	r0, [pc, #4]	; (80013ec <__sinit_lock_acquire+0x8>)
 80013e6:	f000 b8a7 	b.w	8001538 <__retarget_lock_acquire_recursive>
 80013ea:	bf00      	nop
 80013ec:	20000093 	.word	0x20000093

080013f0 <__sinit_lock_release>:
 80013f0:	4801      	ldr	r0, [pc, #4]	; (80013f8 <__sinit_lock_release+0x8>)
 80013f2:	f000 b8a2 	b.w	800153a <__retarget_lock_release_recursive>
 80013f6:	bf00      	nop
 80013f8:	20000093 	.word	0x20000093

080013fc <__sinit>:
 80013fc:	b510      	push	{r4, lr}
 80013fe:	4604      	mov	r4, r0
 8001400:	f7ff fff0 	bl	80013e4 <__sinit_lock_acquire>
 8001404:	69a3      	ldr	r3, [r4, #24]
 8001406:	b11b      	cbz	r3, 8001410 <__sinit+0x14>
 8001408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800140c:	f7ff bff0 	b.w	80013f0 <__sinit_lock_release>
 8001410:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001414:	6523      	str	r3, [r4, #80]	; 0x50
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <__sinit+0x68>)
 8001418:	4a13      	ldr	r2, [pc, #76]	; (8001468 <__sinit+0x6c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	62a2      	str	r2, [r4, #40]	; 0x28
 800141e:	42a3      	cmp	r3, r4
 8001420:	bf04      	itt	eq
 8001422:	2301      	moveq	r3, #1
 8001424:	61a3      	streq	r3, [r4, #24]
 8001426:	4620      	mov	r0, r4
 8001428:	f000 f820 	bl	800146c <__sfp>
 800142c:	6060      	str	r0, [r4, #4]
 800142e:	4620      	mov	r0, r4
 8001430:	f000 f81c 	bl	800146c <__sfp>
 8001434:	60a0      	str	r0, [r4, #8]
 8001436:	4620      	mov	r0, r4
 8001438:	f000 f818 	bl	800146c <__sfp>
 800143c:	2200      	movs	r2, #0
 800143e:	60e0      	str	r0, [r4, #12]
 8001440:	2104      	movs	r1, #4
 8001442:	6860      	ldr	r0, [r4, #4]
 8001444:	f7ff ff82 	bl	800134c <std>
 8001448:	68a0      	ldr	r0, [r4, #8]
 800144a:	2201      	movs	r2, #1
 800144c:	2109      	movs	r1, #9
 800144e:	f7ff ff7d 	bl	800134c <std>
 8001452:	68e0      	ldr	r0, [r4, #12]
 8001454:	2202      	movs	r2, #2
 8001456:	2112      	movs	r1, #18
 8001458:	f7ff ff78 	bl	800134c <std>
 800145c:	2301      	movs	r3, #1
 800145e:	61a3      	str	r3, [r4, #24]
 8001460:	e7d2      	b.n	8001408 <__sinit+0xc>
 8001462:	bf00      	nop
 8001464:	0800220c 	.word	0x0800220c
 8001468:	08001395 	.word	0x08001395

0800146c <__sfp>:
 800146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146e:	4607      	mov	r7, r0
 8001470:	f7ff ffac 	bl	80013cc <__sfp_lock_acquire>
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <__sfp+0x84>)
 8001476:	681e      	ldr	r6, [r3, #0]
 8001478:	69b3      	ldr	r3, [r6, #24]
 800147a:	b913      	cbnz	r3, 8001482 <__sfp+0x16>
 800147c:	4630      	mov	r0, r6
 800147e:	f7ff ffbd 	bl	80013fc <__sinit>
 8001482:	3648      	adds	r6, #72	; 0x48
 8001484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001488:	3b01      	subs	r3, #1
 800148a:	d503      	bpl.n	8001494 <__sfp+0x28>
 800148c:	6833      	ldr	r3, [r6, #0]
 800148e:	b30b      	cbz	r3, 80014d4 <__sfp+0x68>
 8001490:	6836      	ldr	r6, [r6, #0]
 8001492:	e7f7      	b.n	8001484 <__sfp+0x18>
 8001494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001498:	b9d5      	cbnz	r5, 80014d0 <__sfp+0x64>
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <__sfp+0x88>)
 800149c:	60e3      	str	r3, [r4, #12]
 800149e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80014a2:	6665      	str	r5, [r4, #100]	; 0x64
 80014a4:	f000 f847 	bl	8001536 <__retarget_lock_init_recursive>
 80014a8:	f7ff ff96 	bl	80013d8 <__sfp_lock_release>
 80014ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80014b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80014b4:	6025      	str	r5, [r4, #0]
 80014b6:	61a5      	str	r5, [r4, #24]
 80014b8:	2208      	movs	r2, #8
 80014ba:	4629      	mov	r1, r5
 80014bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80014c0:	f7ff ff24 	bl	800130c <memset>
 80014c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80014c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80014cc:	4620      	mov	r0, r4
 80014ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014d0:	3468      	adds	r4, #104	; 0x68
 80014d2:	e7d9      	b.n	8001488 <__sfp+0x1c>
 80014d4:	2104      	movs	r1, #4
 80014d6:	4638      	mov	r0, r7
 80014d8:	f7ff ff62 	bl	80013a0 <__sfmoreglue>
 80014dc:	4604      	mov	r4, r0
 80014de:	6030      	str	r0, [r6, #0]
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d1d5      	bne.n	8001490 <__sfp+0x24>
 80014e4:	f7ff ff78 	bl	80013d8 <__sfp_lock_release>
 80014e8:	230c      	movs	r3, #12
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	e7ee      	b.n	80014cc <__sfp+0x60>
 80014ee:	bf00      	nop
 80014f0:	0800220c 	.word	0x0800220c
 80014f4:	ffff0001 	.word	0xffff0001

080014f8 <_fwalk_reent>:
 80014f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014fc:	4606      	mov	r6, r0
 80014fe:	4688      	mov	r8, r1
 8001500:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001504:	2700      	movs	r7, #0
 8001506:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800150a:	f1b9 0901 	subs.w	r9, r9, #1
 800150e:	d505      	bpl.n	800151c <_fwalk_reent+0x24>
 8001510:	6824      	ldr	r4, [r4, #0]
 8001512:	2c00      	cmp	r4, #0
 8001514:	d1f7      	bne.n	8001506 <_fwalk_reent+0xe>
 8001516:	4638      	mov	r0, r7
 8001518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800151c:	89ab      	ldrh	r3, [r5, #12]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d907      	bls.n	8001532 <_fwalk_reent+0x3a>
 8001522:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001526:	3301      	adds	r3, #1
 8001528:	d003      	beq.n	8001532 <_fwalk_reent+0x3a>
 800152a:	4629      	mov	r1, r5
 800152c:	4630      	mov	r0, r6
 800152e:	47c0      	blx	r8
 8001530:	4307      	orrs	r7, r0
 8001532:	3568      	adds	r5, #104	; 0x68
 8001534:	e7e9      	b.n	800150a <_fwalk_reent+0x12>

08001536 <__retarget_lock_init_recursive>:
 8001536:	4770      	bx	lr

08001538 <__retarget_lock_acquire_recursive>:
 8001538:	4770      	bx	lr

0800153a <__retarget_lock_release_recursive>:
 800153a:	4770      	bx	lr

0800153c <_malloc_r>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	1ccd      	adds	r5, r1, #3
 8001540:	f025 0503 	bic.w	r5, r5, #3
 8001544:	3508      	adds	r5, #8
 8001546:	2d0c      	cmp	r5, #12
 8001548:	bf38      	it	cc
 800154a:	250c      	movcc	r5, #12
 800154c:	2d00      	cmp	r5, #0
 800154e:	4606      	mov	r6, r0
 8001550:	db01      	blt.n	8001556 <_malloc_r+0x1a>
 8001552:	42a9      	cmp	r1, r5
 8001554:	d903      	bls.n	800155e <_malloc_r+0x22>
 8001556:	230c      	movs	r3, #12
 8001558:	6033      	str	r3, [r6, #0]
 800155a:	2000      	movs	r0, #0
 800155c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800155e:	f000 fda3 	bl	80020a8 <__malloc_lock>
 8001562:	4921      	ldr	r1, [pc, #132]	; (80015e8 <_malloc_r+0xac>)
 8001564:	680a      	ldr	r2, [r1, #0]
 8001566:	4614      	mov	r4, r2
 8001568:	b99c      	cbnz	r4, 8001592 <_malloc_r+0x56>
 800156a:	4f20      	ldr	r7, [pc, #128]	; (80015ec <_malloc_r+0xb0>)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b923      	cbnz	r3, 800157a <_malloc_r+0x3e>
 8001570:	4621      	mov	r1, r4
 8001572:	4630      	mov	r0, r6
 8001574:	f000 fb2a 	bl	8001bcc <_sbrk_r>
 8001578:	6038      	str	r0, [r7, #0]
 800157a:	4629      	mov	r1, r5
 800157c:	4630      	mov	r0, r6
 800157e:	f000 fb25 	bl	8001bcc <_sbrk_r>
 8001582:	1c43      	adds	r3, r0, #1
 8001584:	d123      	bne.n	80015ce <_malloc_r+0x92>
 8001586:	230c      	movs	r3, #12
 8001588:	6033      	str	r3, [r6, #0]
 800158a:	4630      	mov	r0, r6
 800158c:	f000 fd92 	bl	80020b4 <__malloc_unlock>
 8001590:	e7e3      	b.n	800155a <_malloc_r+0x1e>
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	1b5b      	subs	r3, r3, r5
 8001596:	d417      	bmi.n	80015c8 <_malloc_r+0x8c>
 8001598:	2b0b      	cmp	r3, #11
 800159a:	d903      	bls.n	80015a4 <_malloc_r+0x68>
 800159c:	6023      	str	r3, [r4, #0]
 800159e:	441c      	add	r4, r3
 80015a0:	6025      	str	r5, [r4, #0]
 80015a2:	e004      	b.n	80015ae <_malloc_r+0x72>
 80015a4:	6863      	ldr	r3, [r4, #4]
 80015a6:	42a2      	cmp	r2, r4
 80015a8:	bf0c      	ite	eq
 80015aa:	600b      	streq	r3, [r1, #0]
 80015ac:	6053      	strne	r3, [r2, #4]
 80015ae:	4630      	mov	r0, r6
 80015b0:	f000 fd80 	bl	80020b4 <__malloc_unlock>
 80015b4:	f104 000b 	add.w	r0, r4, #11
 80015b8:	1d23      	adds	r3, r4, #4
 80015ba:	f020 0007 	bic.w	r0, r0, #7
 80015be:	1ac2      	subs	r2, r0, r3
 80015c0:	d0cc      	beq.n	800155c <_malloc_r+0x20>
 80015c2:	1a1b      	subs	r3, r3, r0
 80015c4:	50a3      	str	r3, [r4, r2]
 80015c6:	e7c9      	b.n	800155c <_malloc_r+0x20>
 80015c8:	4622      	mov	r2, r4
 80015ca:	6864      	ldr	r4, [r4, #4]
 80015cc:	e7cc      	b.n	8001568 <_malloc_r+0x2c>
 80015ce:	1cc4      	adds	r4, r0, #3
 80015d0:	f024 0403 	bic.w	r4, r4, #3
 80015d4:	42a0      	cmp	r0, r4
 80015d6:	d0e3      	beq.n	80015a0 <_malloc_r+0x64>
 80015d8:	1a21      	subs	r1, r4, r0
 80015da:	4630      	mov	r0, r6
 80015dc:	f000 faf6 	bl	8001bcc <_sbrk_r>
 80015e0:	3001      	adds	r0, #1
 80015e2:	d1dd      	bne.n	80015a0 <_malloc_r+0x64>
 80015e4:	e7cf      	b.n	8001586 <_malloc_r+0x4a>
 80015e6:	bf00      	nop
 80015e8:	20000088 	.word	0x20000088
 80015ec:	2000008c 	.word	0x2000008c

080015f0 <__sfputc_r>:
 80015f0:	6893      	ldr	r3, [r2, #8]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	b410      	push	{r4}
 80015f8:	6093      	str	r3, [r2, #8]
 80015fa:	da08      	bge.n	800160e <__sfputc_r+0x1e>
 80015fc:	6994      	ldr	r4, [r2, #24]
 80015fe:	42a3      	cmp	r3, r4
 8001600:	db01      	blt.n	8001606 <__sfputc_r+0x16>
 8001602:	290a      	cmp	r1, #10
 8001604:	d103      	bne.n	800160e <__sfputc_r+0x1e>
 8001606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800160a:	f000 bb33 	b.w	8001c74 <__swbuf_r>
 800160e:	6813      	ldr	r3, [r2, #0]
 8001610:	1c58      	adds	r0, r3, #1
 8001612:	6010      	str	r0, [r2, #0]
 8001614:	7019      	strb	r1, [r3, #0]
 8001616:	4608      	mov	r0, r1
 8001618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800161c:	4770      	bx	lr

0800161e <__sfputs_r>:
 800161e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001620:	4606      	mov	r6, r0
 8001622:	460f      	mov	r7, r1
 8001624:	4614      	mov	r4, r2
 8001626:	18d5      	adds	r5, r2, r3
 8001628:	42ac      	cmp	r4, r5
 800162a:	d101      	bne.n	8001630 <__sfputs_r+0x12>
 800162c:	2000      	movs	r0, #0
 800162e:	e007      	b.n	8001640 <__sfputs_r+0x22>
 8001630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001634:	463a      	mov	r2, r7
 8001636:	4630      	mov	r0, r6
 8001638:	f7ff ffda 	bl	80015f0 <__sfputc_r>
 800163c:	1c43      	adds	r3, r0, #1
 800163e:	d1f3      	bne.n	8001628 <__sfputs_r+0xa>
 8001640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001644 <_vfiprintf_r>:
 8001644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001648:	460d      	mov	r5, r1
 800164a:	b09d      	sub	sp, #116	; 0x74
 800164c:	4614      	mov	r4, r2
 800164e:	4698      	mov	r8, r3
 8001650:	4606      	mov	r6, r0
 8001652:	b118      	cbz	r0, 800165c <_vfiprintf_r+0x18>
 8001654:	6983      	ldr	r3, [r0, #24]
 8001656:	b90b      	cbnz	r3, 800165c <_vfiprintf_r+0x18>
 8001658:	f7ff fed0 	bl	80013fc <__sinit>
 800165c:	4b89      	ldr	r3, [pc, #548]	; (8001884 <_vfiprintf_r+0x240>)
 800165e:	429d      	cmp	r5, r3
 8001660:	d11b      	bne.n	800169a <_vfiprintf_r+0x56>
 8001662:	6875      	ldr	r5, [r6, #4]
 8001664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001666:	07d9      	lsls	r1, r3, #31
 8001668:	d405      	bmi.n	8001676 <_vfiprintf_r+0x32>
 800166a:	89ab      	ldrh	r3, [r5, #12]
 800166c:	059a      	lsls	r2, r3, #22
 800166e:	d402      	bmi.n	8001676 <_vfiprintf_r+0x32>
 8001670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001672:	f7ff ff61 	bl	8001538 <__retarget_lock_acquire_recursive>
 8001676:	89ab      	ldrh	r3, [r5, #12]
 8001678:	071b      	lsls	r3, r3, #28
 800167a:	d501      	bpl.n	8001680 <_vfiprintf_r+0x3c>
 800167c:	692b      	ldr	r3, [r5, #16]
 800167e:	b9eb      	cbnz	r3, 80016bc <_vfiprintf_r+0x78>
 8001680:	4629      	mov	r1, r5
 8001682:	4630      	mov	r0, r6
 8001684:	f000 fb5a 	bl	8001d3c <__swsetup_r>
 8001688:	b1c0      	cbz	r0, 80016bc <_vfiprintf_r+0x78>
 800168a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800168c:	07dc      	lsls	r4, r3, #31
 800168e:	d50e      	bpl.n	80016ae <_vfiprintf_r+0x6a>
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	b01d      	add	sp, #116	; 0x74
 8001696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800169a:	4b7b      	ldr	r3, [pc, #492]	; (8001888 <_vfiprintf_r+0x244>)
 800169c:	429d      	cmp	r5, r3
 800169e:	d101      	bne.n	80016a4 <_vfiprintf_r+0x60>
 80016a0:	68b5      	ldr	r5, [r6, #8]
 80016a2:	e7df      	b.n	8001664 <_vfiprintf_r+0x20>
 80016a4:	4b79      	ldr	r3, [pc, #484]	; (800188c <_vfiprintf_r+0x248>)
 80016a6:	429d      	cmp	r5, r3
 80016a8:	bf08      	it	eq
 80016aa:	68f5      	ldreq	r5, [r6, #12]
 80016ac:	e7da      	b.n	8001664 <_vfiprintf_r+0x20>
 80016ae:	89ab      	ldrh	r3, [r5, #12]
 80016b0:	0598      	lsls	r0, r3, #22
 80016b2:	d4ed      	bmi.n	8001690 <_vfiprintf_r+0x4c>
 80016b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016b6:	f7ff ff40 	bl	800153a <__retarget_lock_release_recursive>
 80016ba:	e7e9      	b.n	8001690 <_vfiprintf_r+0x4c>
 80016bc:	2300      	movs	r3, #0
 80016be:	9309      	str	r3, [sp, #36]	; 0x24
 80016c0:	2320      	movs	r3, #32
 80016c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80016c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80016ca:	2330      	movs	r3, #48	; 0x30
 80016cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001890 <_vfiprintf_r+0x24c>
 80016d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80016d4:	f04f 0901 	mov.w	r9, #1
 80016d8:	4623      	mov	r3, r4
 80016da:	469a      	mov	sl, r3
 80016dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80016e0:	b10a      	cbz	r2, 80016e6 <_vfiprintf_r+0xa2>
 80016e2:	2a25      	cmp	r2, #37	; 0x25
 80016e4:	d1f9      	bne.n	80016da <_vfiprintf_r+0x96>
 80016e6:	ebba 0b04 	subs.w	fp, sl, r4
 80016ea:	d00b      	beq.n	8001704 <_vfiprintf_r+0xc0>
 80016ec:	465b      	mov	r3, fp
 80016ee:	4622      	mov	r2, r4
 80016f0:	4629      	mov	r1, r5
 80016f2:	4630      	mov	r0, r6
 80016f4:	f7ff ff93 	bl	800161e <__sfputs_r>
 80016f8:	3001      	adds	r0, #1
 80016fa:	f000 80aa 	beq.w	8001852 <_vfiprintf_r+0x20e>
 80016fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001700:	445a      	add	r2, fp
 8001702:	9209      	str	r2, [sp, #36]	; 0x24
 8001704:	f89a 3000 	ldrb.w	r3, [sl]
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 80a2 	beq.w	8001852 <_vfiprintf_r+0x20e>
 800170e:	2300      	movs	r3, #0
 8001710:	f04f 32ff 	mov.w	r2, #4294967295
 8001714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001718:	f10a 0a01 	add.w	sl, sl, #1
 800171c:	9304      	str	r3, [sp, #16]
 800171e:	9307      	str	r3, [sp, #28]
 8001720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001724:	931a      	str	r3, [sp, #104]	; 0x68
 8001726:	4654      	mov	r4, sl
 8001728:	2205      	movs	r2, #5
 800172a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800172e:	4858      	ldr	r0, [pc, #352]	; (8001890 <_vfiprintf_r+0x24c>)
 8001730:	f7fe fd5e 	bl	80001f0 <memchr>
 8001734:	9a04      	ldr	r2, [sp, #16]
 8001736:	b9d8      	cbnz	r0, 8001770 <_vfiprintf_r+0x12c>
 8001738:	06d1      	lsls	r1, r2, #27
 800173a:	bf44      	itt	mi
 800173c:	2320      	movmi	r3, #32
 800173e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001742:	0713      	lsls	r3, r2, #28
 8001744:	bf44      	itt	mi
 8001746:	232b      	movmi	r3, #43	; 0x2b
 8001748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800174c:	f89a 3000 	ldrb.w	r3, [sl]
 8001750:	2b2a      	cmp	r3, #42	; 0x2a
 8001752:	d015      	beq.n	8001780 <_vfiprintf_r+0x13c>
 8001754:	9a07      	ldr	r2, [sp, #28]
 8001756:	4654      	mov	r4, sl
 8001758:	2000      	movs	r0, #0
 800175a:	f04f 0c0a 	mov.w	ip, #10
 800175e:	4621      	mov	r1, r4
 8001760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001764:	3b30      	subs	r3, #48	; 0x30
 8001766:	2b09      	cmp	r3, #9
 8001768:	d94e      	bls.n	8001808 <_vfiprintf_r+0x1c4>
 800176a:	b1b0      	cbz	r0, 800179a <_vfiprintf_r+0x156>
 800176c:	9207      	str	r2, [sp, #28]
 800176e:	e014      	b.n	800179a <_vfiprintf_r+0x156>
 8001770:	eba0 0308 	sub.w	r3, r0, r8
 8001774:	fa09 f303 	lsl.w	r3, r9, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	9304      	str	r3, [sp, #16]
 800177c:	46a2      	mov	sl, r4
 800177e:	e7d2      	b.n	8001726 <_vfiprintf_r+0xe2>
 8001780:	9b03      	ldr	r3, [sp, #12]
 8001782:	1d19      	adds	r1, r3, #4
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	9103      	str	r1, [sp, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	bfbb      	ittet	lt
 800178c:	425b      	neglt	r3, r3
 800178e:	f042 0202 	orrlt.w	r2, r2, #2
 8001792:	9307      	strge	r3, [sp, #28]
 8001794:	9307      	strlt	r3, [sp, #28]
 8001796:	bfb8      	it	lt
 8001798:	9204      	strlt	r2, [sp, #16]
 800179a:	7823      	ldrb	r3, [r4, #0]
 800179c:	2b2e      	cmp	r3, #46	; 0x2e
 800179e:	d10c      	bne.n	80017ba <_vfiprintf_r+0x176>
 80017a0:	7863      	ldrb	r3, [r4, #1]
 80017a2:	2b2a      	cmp	r3, #42	; 0x2a
 80017a4:	d135      	bne.n	8001812 <_vfiprintf_r+0x1ce>
 80017a6:	9b03      	ldr	r3, [sp, #12]
 80017a8:	1d1a      	adds	r2, r3, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	9203      	str	r2, [sp, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bfb8      	it	lt
 80017b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80017b6:	3402      	adds	r4, #2
 80017b8:	9305      	str	r3, [sp, #20]
 80017ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80018a0 <_vfiprintf_r+0x25c>
 80017be:	7821      	ldrb	r1, [r4, #0]
 80017c0:	2203      	movs	r2, #3
 80017c2:	4650      	mov	r0, sl
 80017c4:	f7fe fd14 	bl	80001f0 <memchr>
 80017c8:	b140      	cbz	r0, 80017dc <_vfiprintf_r+0x198>
 80017ca:	2340      	movs	r3, #64	; 0x40
 80017cc:	eba0 000a 	sub.w	r0, r0, sl
 80017d0:	fa03 f000 	lsl.w	r0, r3, r0
 80017d4:	9b04      	ldr	r3, [sp, #16]
 80017d6:	4303      	orrs	r3, r0
 80017d8:	3401      	adds	r4, #1
 80017da:	9304      	str	r3, [sp, #16]
 80017dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017e0:	482c      	ldr	r0, [pc, #176]	; (8001894 <_vfiprintf_r+0x250>)
 80017e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80017e6:	2206      	movs	r2, #6
 80017e8:	f7fe fd02 	bl	80001f0 <memchr>
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d03f      	beq.n	8001870 <_vfiprintf_r+0x22c>
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <_vfiprintf_r+0x254>)
 80017f2:	bb1b      	cbnz	r3, 800183c <_vfiprintf_r+0x1f8>
 80017f4:	9b03      	ldr	r3, [sp, #12]
 80017f6:	3307      	adds	r3, #7
 80017f8:	f023 0307 	bic.w	r3, r3, #7
 80017fc:	3308      	adds	r3, #8
 80017fe:	9303      	str	r3, [sp, #12]
 8001800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001802:	443b      	add	r3, r7
 8001804:	9309      	str	r3, [sp, #36]	; 0x24
 8001806:	e767      	b.n	80016d8 <_vfiprintf_r+0x94>
 8001808:	fb0c 3202 	mla	r2, ip, r2, r3
 800180c:	460c      	mov	r4, r1
 800180e:	2001      	movs	r0, #1
 8001810:	e7a5      	b.n	800175e <_vfiprintf_r+0x11a>
 8001812:	2300      	movs	r3, #0
 8001814:	3401      	adds	r4, #1
 8001816:	9305      	str	r3, [sp, #20]
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 0c0a 	mov.w	ip, #10
 800181e:	4620      	mov	r0, r4
 8001820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001824:	3a30      	subs	r2, #48	; 0x30
 8001826:	2a09      	cmp	r2, #9
 8001828:	d903      	bls.n	8001832 <_vfiprintf_r+0x1ee>
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0c5      	beq.n	80017ba <_vfiprintf_r+0x176>
 800182e:	9105      	str	r1, [sp, #20]
 8001830:	e7c3      	b.n	80017ba <_vfiprintf_r+0x176>
 8001832:	fb0c 2101 	mla	r1, ip, r1, r2
 8001836:	4604      	mov	r4, r0
 8001838:	2301      	movs	r3, #1
 800183a:	e7f0      	b.n	800181e <_vfiprintf_r+0x1da>
 800183c:	ab03      	add	r3, sp, #12
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	462a      	mov	r2, r5
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <_vfiprintf_r+0x258>)
 8001844:	a904      	add	r1, sp, #16
 8001846:	4630      	mov	r0, r6
 8001848:	f3af 8000 	nop.w
 800184c:	4607      	mov	r7, r0
 800184e:	1c78      	adds	r0, r7, #1
 8001850:	d1d6      	bne.n	8001800 <_vfiprintf_r+0x1bc>
 8001852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001854:	07d9      	lsls	r1, r3, #31
 8001856:	d405      	bmi.n	8001864 <_vfiprintf_r+0x220>
 8001858:	89ab      	ldrh	r3, [r5, #12]
 800185a:	059a      	lsls	r2, r3, #22
 800185c:	d402      	bmi.n	8001864 <_vfiprintf_r+0x220>
 800185e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001860:	f7ff fe6b 	bl	800153a <__retarget_lock_release_recursive>
 8001864:	89ab      	ldrh	r3, [r5, #12]
 8001866:	065b      	lsls	r3, r3, #25
 8001868:	f53f af12 	bmi.w	8001690 <_vfiprintf_r+0x4c>
 800186c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800186e:	e711      	b.n	8001694 <_vfiprintf_r+0x50>
 8001870:	ab03      	add	r3, sp, #12
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	462a      	mov	r2, r5
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <_vfiprintf_r+0x258>)
 8001878:	a904      	add	r1, sp, #16
 800187a:	4630      	mov	r0, r6
 800187c:	f000 f880 	bl	8001980 <_printf_i>
 8001880:	e7e4      	b.n	800184c <_vfiprintf_r+0x208>
 8001882:	bf00      	nop
 8001884:	08002230 	.word	0x08002230
 8001888:	08002250 	.word	0x08002250
 800188c:	08002210 	.word	0x08002210
 8001890:	08002270 	.word	0x08002270
 8001894:	0800227a 	.word	0x0800227a
 8001898:	00000000 	.word	0x00000000
 800189c:	0800161f 	.word	0x0800161f
 80018a0:	08002276 	.word	0x08002276

080018a4 <_printf_common>:
 80018a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018a8:	4616      	mov	r6, r2
 80018aa:	4699      	mov	r9, r3
 80018ac:	688a      	ldr	r2, [r1, #8]
 80018ae:	690b      	ldr	r3, [r1, #16]
 80018b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018b4:	4293      	cmp	r3, r2
 80018b6:	bfb8      	it	lt
 80018b8:	4613      	movlt	r3, r2
 80018ba:	6033      	str	r3, [r6, #0]
 80018bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80018c0:	4607      	mov	r7, r0
 80018c2:	460c      	mov	r4, r1
 80018c4:	b10a      	cbz	r2, 80018ca <_printf_common+0x26>
 80018c6:	3301      	adds	r3, #1
 80018c8:	6033      	str	r3, [r6, #0]
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	0699      	lsls	r1, r3, #26
 80018ce:	bf42      	ittt	mi
 80018d0:	6833      	ldrmi	r3, [r6, #0]
 80018d2:	3302      	addmi	r3, #2
 80018d4:	6033      	strmi	r3, [r6, #0]
 80018d6:	6825      	ldr	r5, [r4, #0]
 80018d8:	f015 0506 	ands.w	r5, r5, #6
 80018dc:	d106      	bne.n	80018ec <_printf_common+0x48>
 80018de:	f104 0a19 	add.w	sl, r4, #25
 80018e2:	68e3      	ldr	r3, [r4, #12]
 80018e4:	6832      	ldr	r2, [r6, #0]
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	42ab      	cmp	r3, r5
 80018ea:	dc26      	bgt.n	800193a <_printf_common+0x96>
 80018ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80018f0:	1e13      	subs	r3, r2, #0
 80018f2:	6822      	ldr	r2, [r4, #0]
 80018f4:	bf18      	it	ne
 80018f6:	2301      	movne	r3, #1
 80018f8:	0692      	lsls	r2, r2, #26
 80018fa:	d42b      	bmi.n	8001954 <_printf_common+0xb0>
 80018fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001900:	4649      	mov	r1, r9
 8001902:	4638      	mov	r0, r7
 8001904:	47c0      	blx	r8
 8001906:	3001      	adds	r0, #1
 8001908:	d01e      	beq.n	8001948 <_printf_common+0xa4>
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	68e5      	ldr	r5, [r4, #12]
 800190e:	6832      	ldr	r2, [r6, #0]
 8001910:	f003 0306 	and.w	r3, r3, #6
 8001914:	2b04      	cmp	r3, #4
 8001916:	bf08      	it	eq
 8001918:	1aad      	subeq	r5, r5, r2
 800191a:	68a3      	ldr	r3, [r4, #8]
 800191c:	6922      	ldr	r2, [r4, #16]
 800191e:	bf0c      	ite	eq
 8001920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001924:	2500      	movne	r5, #0
 8001926:	4293      	cmp	r3, r2
 8001928:	bfc4      	itt	gt
 800192a:	1a9b      	subgt	r3, r3, r2
 800192c:	18ed      	addgt	r5, r5, r3
 800192e:	2600      	movs	r6, #0
 8001930:	341a      	adds	r4, #26
 8001932:	42b5      	cmp	r5, r6
 8001934:	d11a      	bne.n	800196c <_printf_common+0xc8>
 8001936:	2000      	movs	r0, #0
 8001938:	e008      	b.n	800194c <_printf_common+0xa8>
 800193a:	2301      	movs	r3, #1
 800193c:	4652      	mov	r2, sl
 800193e:	4649      	mov	r1, r9
 8001940:	4638      	mov	r0, r7
 8001942:	47c0      	blx	r8
 8001944:	3001      	adds	r0, #1
 8001946:	d103      	bne.n	8001950 <_printf_common+0xac>
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001950:	3501      	adds	r5, #1
 8001952:	e7c6      	b.n	80018e2 <_printf_common+0x3e>
 8001954:	18e1      	adds	r1, r4, r3
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	2030      	movs	r0, #48	; 0x30
 800195a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800195e:	4422      	add	r2, r4
 8001960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001968:	3302      	adds	r3, #2
 800196a:	e7c7      	b.n	80018fc <_printf_common+0x58>
 800196c:	2301      	movs	r3, #1
 800196e:	4622      	mov	r2, r4
 8001970:	4649      	mov	r1, r9
 8001972:	4638      	mov	r0, r7
 8001974:	47c0      	blx	r8
 8001976:	3001      	adds	r0, #1
 8001978:	d0e6      	beq.n	8001948 <_printf_common+0xa4>
 800197a:	3601      	adds	r6, #1
 800197c:	e7d9      	b.n	8001932 <_printf_common+0x8e>
	...

08001980 <_printf_i>:
 8001980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001984:	460c      	mov	r4, r1
 8001986:	4691      	mov	r9, r2
 8001988:	7e27      	ldrb	r7, [r4, #24]
 800198a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800198c:	2f78      	cmp	r7, #120	; 0x78
 800198e:	4680      	mov	r8, r0
 8001990:	469a      	mov	sl, r3
 8001992:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001996:	d807      	bhi.n	80019a8 <_printf_i+0x28>
 8001998:	2f62      	cmp	r7, #98	; 0x62
 800199a:	d80a      	bhi.n	80019b2 <_printf_i+0x32>
 800199c:	2f00      	cmp	r7, #0
 800199e:	f000 80d8 	beq.w	8001b52 <_printf_i+0x1d2>
 80019a2:	2f58      	cmp	r7, #88	; 0x58
 80019a4:	f000 80a3 	beq.w	8001aee <_printf_i+0x16e>
 80019a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80019ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80019b0:	e03a      	b.n	8001a28 <_printf_i+0xa8>
 80019b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80019b6:	2b15      	cmp	r3, #21
 80019b8:	d8f6      	bhi.n	80019a8 <_printf_i+0x28>
 80019ba:	a001      	add	r0, pc, #4	; (adr r0, 80019c0 <_printf_i+0x40>)
 80019bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80019c0:	08001a19 	.word	0x08001a19
 80019c4:	08001a2d 	.word	0x08001a2d
 80019c8:	080019a9 	.word	0x080019a9
 80019cc:	080019a9 	.word	0x080019a9
 80019d0:	080019a9 	.word	0x080019a9
 80019d4:	080019a9 	.word	0x080019a9
 80019d8:	08001a2d 	.word	0x08001a2d
 80019dc:	080019a9 	.word	0x080019a9
 80019e0:	080019a9 	.word	0x080019a9
 80019e4:	080019a9 	.word	0x080019a9
 80019e8:	080019a9 	.word	0x080019a9
 80019ec:	08001b39 	.word	0x08001b39
 80019f0:	08001a5d 	.word	0x08001a5d
 80019f4:	08001b1b 	.word	0x08001b1b
 80019f8:	080019a9 	.word	0x080019a9
 80019fc:	080019a9 	.word	0x080019a9
 8001a00:	08001b5b 	.word	0x08001b5b
 8001a04:	080019a9 	.word	0x080019a9
 8001a08:	08001a5d 	.word	0x08001a5d
 8001a0c:	080019a9 	.word	0x080019a9
 8001a10:	080019a9 	.word	0x080019a9
 8001a14:	08001b23 	.word	0x08001b23
 8001a18:	680b      	ldr	r3, [r1, #0]
 8001a1a:	1d1a      	adds	r2, r3, #4
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	600a      	str	r2, [r1, #0]
 8001a20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0a3      	b.n	8001b74 <_printf_i+0x1f4>
 8001a2c:	6825      	ldr	r5, [r4, #0]
 8001a2e:	6808      	ldr	r0, [r1, #0]
 8001a30:	062e      	lsls	r6, r5, #24
 8001a32:	f100 0304 	add.w	r3, r0, #4
 8001a36:	d50a      	bpl.n	8001a4e <_printf_i+0xce>
 8001a38:	6805      	ldr	r5, [r0, #0]
 8001a3a:	600b      	str	r3, [r1, #0]
 8001a3c:	2d00      	cmp	r5, #0
 8001a3e:	da03      	bge.n	8001a48 <_printf_i+0xc8>
 8001a40:	232d      	movs	r3, #45	; 0x2d
 8001a42:	426d      	negs	r5, r5
 8001a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a48:	485e      	ldr	r0, [pc, #376]	; (8001bc4 <_printf_i+0x244>)
 8001a4a:	230a      	movs	r3, #10
 8001a4c:	e019      	b.n	8001a82 <_printf_i+0x102>
 8001a4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001a52:	6805      	ldr	r5, [r0, #0]
 8001a54:	600b      	str	r3, [r1, #0]
 8001a56:	bf18      	it	ne
 8001a58:	b22d      	sxthne	r5, r5
 8001a5a:	e7ef      	b.n	8001a3c <_printf_i+0xbc>
 8001a5c:	680b      	ldr	r3, [r1, #0]
 8001a5e:	6825      	ldr	r5, [r4, #0]
 8001a60:	1d18      	adds	r0, r3, #4
 8001a62:	6008      	str	r0, [r1, #0]
 8001a64:	0628      	lsls	r0, r5, #24
 8001a66:	d501      	bpl.n	8001a6c <_printf_i+0xec>
 8001a68:	681d      	ldr	r5, [r3, #0]
 8001a6a:	e002      	b.n	8001a72 <_printf_i+0xf2>
 8001a6c:	0669      	lsls	r1, r5, #25
 8001a6e:	d5fb      	bpl.n	8001a68 <_printf_i+0xe8>
 8001a70:	881d      	ldrh	r5, [r3, #0]
 8001a72:	4854      	ldr	r0, [pc, #336]	; (8001bc4 <_printf_i+0x244>)
 8001a74:	2f6f      	cmp	r7, #111	; 0x6f
 8001a76:	bf0c      	ite	eq
 8001a78:	2308      	moveq	r3, #8
 8001a7a:	230a      	movne	r3, #10
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a82:	6866      	ldr	r6, [r4, #4]
 8001a84:	60a6      	str	r6, [r4, #8]
 8001a86:	2e00      	cmp	r6, #0
 8001a88:	bfa2      	ittt	ge
 8001a8a:	6821      	ldrge	r1, [r4, #0]
 8001a8c:	f021 0104 	bicge.w	r1, r1, #4
 8001a90:	6021      	strge	r1, [r4, #0]
 8001a92:	b90d      	cbnz	r5, 8001a98 <_printf_i+0x118>
 8001a94:	2e00      	cmp	r6, #0
 8001a96:	d04d      	beq.n	8001b34 <_printf_i+0x1b4>
 8001a98:	4616      	mov	r6, r2
 8001a9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8001a9e:	fb03 5711 	mls	r7, r3, r1, r5
 8001aa2:	5dc7      	ldrb	r7, [r0, r7]
 8001aa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001aa8:	462f      	mov	r7, r5
 8001aaa:	42bb      	cmp	r3, r7
 8001aac:	460d      	mov	r5, r1
 8001aae:	d9f4      	bls.n	8001a9a <_printf_i+0x11a>
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d10b      	bne.n	8001acc <_printf_i+0x14c>
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	07df      	lsls	r7, r3, #31
 8001ab8:	d508      	bpl.n	8001acc <_printf_i+0x14c>
 8001aba:	6923      	ldr	r3, [r4, #16]
 8001abc:	6861      	ldr	r1, [r4, #4]
 8001abe:	4299      	cmp	r1, r3
 8001ac0:	bfde      	ittt	le
 8001ac2:	2330      	movle	r3, #48	; 0x30
 8001ac4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001ac8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001acc:	1b92      	subs	r2, r2, r6
 8001ace:	6122      	str	r2, [r4, #16]
 8001ad0:	f8cd a000 	str.w	sl, [sp]
 8001ad4:	464b      	mov	r3, r9
 8001ad6:	aa03      	add	r2, sp, #12
 8001ad8:	4621      	mov	r1, r4
 8001ada:	4640      	mov	r0, r8
 8001adc:	f7ff fee2 	bl	80018a4 <_printf_common>
 8001ae0:	3001      	adds	r0, #1
 8001ae2:	d14c      	bne.n	8001b7e <_printf_i+0x1fe>
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	b004      	add	sp, #16
 8001aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aee:	4835      	ldr	r0, [pc, #212]	; (8001bc4 <_printf_i+0x244>)
 8001af0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	680e      	ldr	r6, [r1, #0]
 8001af8:	061f      	lsls	r7, r3, #24
 8001afa:	f856 5b04 	ldr.w	r5, [r6], #4
 8001afe:	600e      	str	r6, [r1, #0]
 8001b00:	d514      	bpl.n	8001b2c <_printf_i+0x1ac>
 8001b02:	07d9      	lsls	r1, r3, #31
 8001b04:	bf44      	itt	mi
 8001b06:	f043 0320 	orrmi.w	r3, r3, #32
 8001b0a:	6023      	strmi	r3, [r4, #0]
 8001b0c:	b91d      	cbnz	r5, 8001b16 <_printf_i+0x196>
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	f023 0320 	bic.w	r3, r3, #32
 8001b14:	6023      	str	r3, [r4, #0]
 8001b16:	2310      	movs	r3, #16
 8001b18:	e7b0      	b.n	8001a7c <_printf_i+0xfc>
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	f043 0320 	orr.w	r3, r3, #32
 8001b20:	6023      	str	r3, [r4, #0]
 8001b22:	2378      	movs	r3, #120	; 0x78
 8001b24:	4828      	ldr	r0, [pc, #160]	; (8001bc8 <_printf_i+0x248>)
 8001b26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b2a:	e7e3      	b.n	8001af4 <_printf_i+0x174>
 8001b2c:	065e      	lsls	r6, r3, #25
 8001b2e:	bf48      	it	mi
 8001b30:	b2ad      	uxthmi	r5, r5
 8001b32:	e7e6      	b.n	8001b02 <_printf_i+0x182>
 8001b34:	4616      	mov	r6, r2
 8001b36:	e7bb      	b.n	8001ab0 <_printf_i+0x130>
 8001b38:	680b      	ldr	r3, [r1, #0]
 8001b3a:	6826      	ldr	r6, [r4, #0]
 8001b3c:	6960      	ldr	r0, [r4, #20]
 8001b3e:	1d1d      	adds	r5, r3, #4
 8001b40:	600d      	str	r5, [r1, #0]
 8001b42:	0635      	lsls	r5, r6, #24
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	d501      	bpl.n	8001b4c <_printf_i+0x1cc>
 8001b48:	6018      	str	r0, [r3, #0]
 8001b4a:	e002      	b.n	8001b52 <_printf_i+0x1d2>
 8001b4c:	0671      	lsls	r1, r6, #25
 8001b4e:	d5fb      	bpl.n	8001b48 <_printf_i+0x1c8>
 8001b50:	8018      	strh	r0, [r3, #0]
 8001b52:	2300      	movs	r3, #0
 8001b54:	6123      	str	r3, [r4, #16]
 8001b56:	4616      	mov	r6, r2
 8001b58:	e7ba      	b.n	8001ad0 <_printf_i+0x150>
 8001b5a:	680b      	ldr	r3, [r1, #0]
 8001b5c:	1d1a      	adds	r2, r3, #4
 8001b5e:	600a      	str	r2, [r1, #0]
 8001b60:	681e      	ldr	r6, [r3, #0]
 8001b62:	6862      	ldr	r2, [r4, #4]
 8001b64:	2100      	movs	r1, #0
 8001b66:	4630      	mov	r0, r6
 8001b68:	f7fe fb42 	bl	80001f0 <memchr>
 8001b6c:	b108      	cbz	r0, 8001b72 <_printf_i+0x1f2>
 8001b6e:	1b80      	subs	r0, r0, r6
 8001b70:	6060      	str	r0, [r4, #4]
 8001b72:	6863      	ldr	r3, [r4, #4]
 8001b74:	6123      	str	r3, [r4, #16]
 8001b76:	2300      	movs	r3, #0
 8001b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b7c:	e7a8      	b.n	8001ad0 <_printf_i+0x150>
 8001b7e:	6923      	ldr	r3, [r4, #16]
 8001b80:	4632      	mov	r2, r6
 8001b82:	4649      	mov	r1, r9
 8001b84:	4640      	mov	r0, r8
 8001b86:	47d0      	blx	sl
 8001b88:	3001      	adds	r0, #1
 8001b8a:	d0ab      	beq.n	8001ae4 <_printf_i+0x164>
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	079b      	lsls	r3, r3, #30
 8001b90:	d413      	bmi.n	8001bba <_printf_i+0x23a>
 8001b92:	68e0      	ldr	r0, [r4, #12]
 8001b94:	9b03      	ldr	r3, [sp, #12]
 8001b96:	4298      	cmp	r0, r3
 8001b98:	bfb8      	it	lt
 8001b9a:	4618      	movlt	r0, r3
 8001b9c:	e7a4      	b.n	8001ae8 <_printf_i+0x168>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	4632      	mov	r2, r6
 8001ba2:	4649      	mov	r1, r9
 8001ba4:	4640      	mov	r0, r8
 8001ba6:	47d0      	blx	sl
 8001ba8:	3001      	adds	r0, #1
 8001baa:	d09b      	beq.n	8001ae4 <_printf_i+0x164>
 8001bac:	3501      	adds	r5, #1
 8001bae:	68e3      	ldr	r3, [r4, #12]
 8001bb0:	9903      	ldr	r1, [sp, #12]
 8001bb2:	1a5b      	subs	r3, r3, r1
 8001bb4:	42ab      	cmp	r3, r5
 8001bb6:	dcf2      	bgt.n	8001b9e <_printf_i+0x21e>
 8001bb8:	e7eb      	b.n	8001b92 <_printf_i+0x212>
 8001bba:	2500      	movs	r5, #0
 8001bbc:	f104 0619 	add.w	r6, r4, #25
 8001bc0:	e7f5      	b.n	8001bae <_printf_i+0x22e>
 8001bc2:	bf00      	nop
 8001bc4:	08002281 	.word	0x08002281
 8001bc8:	08002292 	.word	0x08002292

08001bcc <_sbrk_r>:
 8001bcc:	b538      	push	{r3, r4, r5, lr}
 8001bce:	4d06      	ldr	r5, [pc, #24]	; (8001be8 <_sbrk_r+0x1c>)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	602b      	str	r3, [r5, #0]
 8001bd8:	f7ff fa2c 	bl	8001034 <_sbrk>
 8001bdc:	1c43      	adds	r3, r0, #1
 8001bde:	d102      	bne.n	8001be6 <_sbrk_r+0x1a>
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	b103      	cbz	r3, 8001be6 <_sbrk_r+0x1a>
 8001be4:	6023      	str	r3, [r4, #0]
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
 8001be8:	2000009c 	.word	0x2000009c

08001bec <__sread>:
 8001bec:	b510      	push	{r4, lr}
 8001bee:	460c      	mov	r4, r1
 8001bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bf4:	f000 fab4 	bl	8002160 <_read_r>
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	bfab      	itete	ge
 8001bfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001bfe:	89a3      	ldrhlt	r3, [r4, #12]
 8001c00:	181b      	addge	r3, r3, r0
 8001c02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c06:	bfac      	ite	ge
 8001c08:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c0a:	81a3      	strhlt	r3, [r4, #12]
 8001c0c:	bd10      	pop	{r4, pc}

08001c0e <__swrite>:
 8001c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c12:	461f      	mov	r7, r3
 8001c14:	898b      	ldrh	r3, [r1, #12]
 8001c16:	05db      	lsls	r3, r3, #23
 8001c18:	4605      	mov	r5, r0
 8001c1a:	460c      	mov	r4, r1
 8001c1c:	4616      	mov	r6, r2
 8001c1e:	d505      	bpl.n	8001c2c <__swrite+0x1e>
 8001c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c24:	2302      	movs	r3, #2
 8001c26:	2200      	movs	r2, #0
 8001c28:	f000 f9c8 	bl	8001fbc <_lseek_r>
 8001c2c:	89a3      	ldrh	r3, [r4, #12]
 8001c2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c36:	81a3      	strh	r3, [r4, #12]
 8001c38:	4632      	mov	r2, r6
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c42:	f000 b869 	b.w	8001d18 <_write_r>

08001c46 <__sseek>:
 8001c46:	b510      	push	{r4, lr}
 8001c48:	460c      	mov	r4, r1
 8001c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c4e:	f000 f9b5 	bl	8001fbc <_lseek_r>
 8001c52:	1c43      	adds	r3, r0, #1
 8001c54:	89a3      	ldrh	r3, [r4, #12]
 8001c56:	bf15      	itete	ne
 8001c58:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c62:	81a3      	strheq	r3, [r4, #12]
 8001c64:	bf18      	it	ne
 8001c66:	81a3      	strhne	r3, [r4, #12]
 8001c68:	bd10      	pop	{r4, pc}

08001c6a <__sclose>:
 8001c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c6e:	f000 b8d3 	b.w	8001e18 <_close_r>
	...

08001c74 <__swbuf_r>:
 8001c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c76:	460e      	mov	r6, r1
 8001c78:	4614      	mov	r4, r2
 8001c7a:	4605      	mov	r5, r0
 8001c7c:	b118      	cbz	r0, 8001c86 <__swbuf_r+0x12>
 8001c7e:	6983      	ldr	r3, [r0, #24]
 8001c80:	b90b      	cbnz	r3, 8001c86 <__swbuf_r+0x12>
 8001c82:	f7ff fbbb 	bl	80013fc <__sinit>
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <__swbuf_r+0x98>)
 8001c88:	429c      	cmp	r4, r3
 8001c8a:	d12b      	bne.n	8001ce4 <__swbuf_r+0x70>
 8001c8c:	686c      	ldr	r4, [r5, #4]
 8001c8e:	69a3      	ldr	r3, [r4, #24]
 8001c90:	60a3      	str	r3, [r4, #8]
 8001c92:	89a3      	ldrh	r3, [r4, #12]
 8001c94:	071a      	lsls	r2, r3, #28
 8001c96:	d52f      	bpl.n	8001cf8 <__swbuf_r+0x84>
 8001c98:	6923      	ldr	r3, [r4, #16]
 8001c9a:	b36b      	cbz	r3, 8001cf8 <__swbuf_r+0x84>
 8001c9c:	6923      	ldr	r3, [r4, #16]
 8001c9e:	6820      	ldr	r0, [r4, #0]
 8001ca0:	1ac0      	subs	r0, r0, r3
 8001ca2:	6963      	ldr	r3, [r4, #20]
 8001ca4:	b2f6      	uxtb	r6, r6
 8001ca6:	4283      	cmp	r3, r0
 8001ca8:	4637      	mov	r7, r6
 8001caa:	dc04      	bgt.n	8001cb6 <__swbuf_r+0x42>
 8001cac:	4621      	mov	r1, r4
 8001cae:	4628      	mov	r0, r5
 8001cb0:	f000 f948 	bl	8001f44 <_fflush_r>
 8001cb4:	bb30      	cbnz	r0, 8001d04 <__swbuf_r+0x90>
 8001cb6:	68a3      	ldr	r3, [r4, #8]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	60a3      	str	r3, [r4, #8]
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	6022      	str	r2, [r4, #0]
 8001cc2:	701e      	strb	r6, [r3, #0]
 8001cc4:	6963      	ldr	r3, [r4, #20]
 8001cc6:	3001      	adds	r0, #1
 8001cc8:	4283      	cmp	r3, r0
 8001cca:	d004      	beq.n	8001cd6 <__swbuf_r+0x62>
 8001ccc:	89a3      	ldrh	r3, [r4, #12]
 8001cce:	07db      	lsls	r3, r3, #31
 8001cd0:	d506      	bpl.n	8001ce0 <__swbuf_r+0x6c>
 8001cd2:	2e0a      	cmp	r6, #10
 8001cd4:	d104      	bne.n	8001ce0 <__swbuf_r+0x6c>
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	4628      	mov	r0, r5
 8001cda:	f000 f933 	bl	8001f44 <_fflush_r>
 8001cde:	b988      	cbnz	r0, 8001d04 <__swbuf_r+0x90>
 8001ce0:	4638      	mov	r0, r7
 8001ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <__swbuf_r+0x9c>)
 8001ce6:	429c      	cmp	r4, r3
 8001ce8:	d101      	bne.n	8001cee <__swbuf_r+0x7a>
 8001cea:	68ac      	ldr	r4, [r5, #8]
 8001cec:	e7cf      	b.n	8001c8e <__swbuf_r+0x1a>
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <__swbuf_r+0xa0>)
 8001cf0:	429c      	cmp	r4, r3
 8001cf2:	bf08      	it	eq
 8001cf4:	68ec      	ldreq	r4, [r5, #12]
 8001cf6:	e7ca      	b.n	8001c8e <__swbuf_r+0x1a>
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	4628      	mov	r0, r5
 8001cfc:	f000 f81e 	bl	8001d3c <__swsetup_r>
 8001d00:	2800      	cmp	r0, #0
 8001d02:	d0cb      	beq.n	8001c9c <__swbuf_r+0x28>
 8001d04:	f04f 37ff 	mov.w	r7, #4294967295
 8001d08:	e7ea      	b.n	8001ce0 <__swbuf_r+0x6c>
 8001d0a:	bf00      	nop
 8001d0c:	08002230 	.word	0x08002230
 8001d10:	08002250 	.word	0x08002250
 8001d14:	08002210 	.word	0x08002210

08001d18 <_write_r>:
 8001d18:	b538      	push	{r3, r4, r5, lr}
 8001d1a:	4d07      	ldr	r5, [pc, #28]	; (8001d38 <_write_r+0x20>)
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	4608      	mov	r0, r1
 8001d20:	4611      	mov	r1, r2
 8001d22:	2200      	movs	r2, #0
 8001d24:	602a      	str	r2, [r5, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	f7ff f934 	bl	8000f94 <_write>
 8001d2c:	1c43      	adds	r3, r0, #1
 8001d2e:	d102      	bne.n	8001d36 <_write_r+0x1e>
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	b103      	cbz	r3, 8001d36 <_write_r+0x1e>
 8001d34:	6023      	str	r3, [r4, #0]
 8001d36:	bd38      	pop	{r3, r4, r5, pc}
 8001d38:	2000009c 	.word	0x2000009c

08001d3c <__swsetup_r>:
 8001d3c:	4b32      	ldr	r3, [pc, #200]	; (8001e08 <__swsetup_r+0xcc>)
 8001d3e:	b570      	push	{r4, r5, r6, lr}
 8001d40:	681d      	ldr	r5, [r3, #0]
 8001d42:	4606      	mov	r6, r0
 8001d44:	460c      	mov	r4, r1
 8001d46:	b125      	cbz	r5, 8001d52 <__swsetup_r+0x16>
 8001d48:	69ab      	ldr	r3, [r5, #24]
 8001d4a:	b913      	cbnz	r3, 8001d52 <__swsetup_r+0x16>
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	f7ff fb55 	bl	80013fc <__sinit>
 8001d52:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <__swsetup_r+0xd0>)
 8001d54:	429c      	cmp	r4, r3
 8001d56:	d10f      	bne.n	8001d78 <__swsetup_r+0x3c>
 8001d58:	686c      	ldr	r4, [r5, #4]
 8001d5a:	89a3      	ldrh	r3, [r4, #12]
 8001d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d60:	0719      	lsls	r1, r3, #28
 8001d62:	d42c      	bmi.n	8001dbe <__swsetup_r+0x82>
 8001d64:	06dd      	lsls	r5, r3, #27
 8001d66:	d411      	bmi.n	8001d8c <__swsetup_r+0x50>
 8001d68:	2309      	movs	r3, #9
 8001d6a:	6033      	str	r3, [r6, #0]
 8001d6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001d70:	81a3      	strh	r3, [r4, #12]
 8001d72:	f04f 30ff 	mov.w	r0, #4294967295
 8001d76:	e03e      	b.n	8001df6 <__swsetup_r+0xba>
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <__swsetup_r+0xd4>)
 8001d7a:	429c      	cmp	r4, r3
 8001d7c:	d101      	bne.n	8001d82 <__swsetup_r+0x46>
 8001d7e:	68ac      	ldr	r4, [r5, #8]
 8001d80:	e7eb      	b.n	8001d5a <__swsetup_r+0x1e>
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <__swsetup_r+0xd8>)
 8001d84:	429c      	cmp	r4, r3
 8001d86:	bf08      	it	eq
 8001d88:	68ec      	ldreq	r4, [r5, #12]
 8001d8a:	e7e6      	b.n	8001d5a <__swsetup_r+0x1e>
 8001d8c:	0758      	lsls	r0, r3, #29
 8001d8e:	d512      	bpl.n	8001db6 <__swsetup_r+0x7a>
 8001d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d92:	b141      	cbz	r1, 8001da6 <__swsetup_r+0x6a>
 8001d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d98:	4299      	cmp	r1, r3
 8001d9a:	d002      	beq.n	8001da2 <__swsetup_r+0x66>
 8001d9c:	4630      	mov	r0, r6
 8001d9e:	f000 f98f 	bl	80020c0 <_free_r>
 8001da2:	2300      	movs	r3, #0
 8001da4:	6363      	str	r3, [r4, #52]	; 0x34
 8001da6:	89a3      	ldrh	r3, [r4, #12]
 8001da8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001dac:	81a3      	strh	r3, [r4, #12]
 8001dae:	2300      	movs	r3, #0
 8001db0:	6063      	str	r3, [r4, #4]
 8001db2:	6923      	ldr	r3, [r4, #16]
 8001db4:	6023      	str	r3, [r4, #0]
 8001db6:	89a3      	ldrh	r3, [r4, #12]
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	81a3      	strh	r3, [r4, #12]
 8001dbe:	6923      	ldr	r3, [r4, #16]
 8001dc0:	b94b      	cbnz	r3, 8001dd6 <__swsetup_r+0x9a>
 8001dc2:	89a3      	ldrh	r3, [r4, #12]
 8001dc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dcc:	d003      	beq.n	8001dd6 <__swsetup_r+0x9a>
 8001dce:	4621      	mov	r1, r4
 8001dd0:	4630      	mov	r0, r6
 8001dd2:	f000 f929 	bl	8002028 <__smakebuf_r>
 8001dd6:	89a0      	ldrh	r0, [r4, #12]
 8001dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ddc:	f010 0301 	ands.w	r3, r0, #1
 8001de0:	d00a      	beq.n	8001df8 <__swsetup_r+0xbc>
 8001de2:	2300      	movs	r3, #0
 8001de4:	60a3      	str	r3, [r4, #8]
 8001de6:	6963      	ldr	r3, [r4, #20]
 8001de8:	425b      	negs	r3, r3
 8001dea:	61a3      	str	r3, [r4, #24]
 8001dec:	6923      	ldr	r3, [r4, #16]
 8001dee:	b943      	cbnz	r3, 8001e02 <__swsetup_r+0xc6>
 8001df0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001df4:	d1ba      	bne.n	8001d6c <__swsetup_r+0x30>
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
 8001df8:	0781      	lsls	r1, r0, #30
 8001dfa:	bf58      	it	pl
 8001dfc:	6963      	ldrpl	r3, [r4, #20]
 8001dfe:	60a3      	str	r3, [r4, #8]
 8001e00:	e7f4      	b.n	8001dec <__swsetup_r+0xb0>
 8001e02:	2000      	movs	r0, #0
 8001e04:	e7f7      	b.n	8001df6 <__swsetup_r+0xba>
 8001e06:	bf00      	nop
 8001e08:	20000004 	.word	0x20000004
 8001e0c:	08002230 	.word	0x08002230
 8001e10:	08002250 	.word	0x08002250
 8001e14:	08002210 	.word	0x08002210

08001e18 <_close_r>:
 8001e18:	b538      	push	{r3, r4, r5, lr}
 8001e1a:	4d06      	ldr	r5, [pc, #24]	; (8001e34 <_close_r+0x1c>)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	4604      	mov	r4, r0
 8001e20:	4608      	mov	r0, r1
 8001e22:	602b      	str	r3, [r5, #0]
 8001e24:	f7ff f8d2 	bl	8000fcc <_close>
 8001e28:	1c43      	adds	r3, r0, #1
 8001e2a:	d102      	bne.n	8001e32 <_close_r+0x1a>
 8001e2c:	682b      	ldr	r3, [r5, #0]
 8001e2e:	b103      	cbz	r3, 8001e32 <_close_r+0x1a>
 8001e30:	6023      	str	r3, [r4, #0]
 8001e32:	bd38      	pop	{r3, r4, r5, pc}
 8001e34:	2000009c 	.word	0x2000009c

08001e38 <__sflush_r>:
 8001e38:	898a      	ldrh	r2, [r1, #12]
 8001e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e3e:	4605      	mov	r5, r0
 8001e40:	0710      	lsls	r0, r2, #28
 8001e42:	460c      	mov	r4, r1
 8001e44:	d458      	bmi.n	8001ef8 <__sflush_r+0xc0>
 8001e46:	684b      	ldr	r3, [r1, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	dc05      	bgt.n	8001e58 <__sflush_r+0x20>
 8001e4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	dc02      	bgt.n	8001e58 <__sflush_r+0x20>
 8001e52:	2000      	movs	r0, #0
 8001e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e5a:	2e00      	cmp	r6, #0
 8001e5c:	d0f9      	beq.n	8001e52 <__sflush_r+0x1a>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e64:	682f      	ldr	r7, [r5, #0]
 8001e66:	602b      	str	r3, [r5, #0]
 8001e68:	d032      	beq.n	8001ed0 <__sflush_r+0x98>
 8001e6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e6c:	89a3      	ldrh	r3, [r4, #12]
 8001e6e:	075a      	lsls	r2, r3, #29
 8001e70:	d505      	bpl.n	8001e7e <__sflush_r+0x46>
 8001e72:	6863      	ldr	r3, [r4, #4]
 8001e74:	1ac0      	subs	r0, r0, r3
 8001e76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e78:	b10b      	cbz	r3, 8001e7e <__sflush_r+0x46>
 8001e7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e7c:	1ac0      	subs	r0, r0, r3
 8001e7e:	2300      	movs	r3, #0
 8001e80:	4602      	mov	r2, r0
 8001e82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e84:	6a21      	ldr	r1, [r4, #32]
 8001e86:	4628      	mov	r0, r5
 8001e88:	47b0      	blx	r6
 8001e8a:	1c43      	adds	r3, r0, #1
 8001e8c:	89a3      	ldrh	r3, [r4, #12]
 8001e8e:	d106      	bne.n	8001e9e <__sflush_r+0x66>
 8001e90:	6829      	ldr	r1, [r5, #0]
 8001e92:	291d      	cmp	r1, #29
 8001e94:	d82c      	bhi.n	8001ef0 <__sflush_r+0xb8>
 8001e96:	4a2a      	ldr	r2, [pc, #168]	; (8001f40 <__sflush_r+0x108>)
 8001e98:	40ca      	lsrs	r2, r1
 8001e9a:	07d6      	lsls	r6, r2, #31
 8001e9c:	d528      	bpl.n	8001ef0 <__sflush_r+0xb8>
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	6062      	str	r2, [r4, #4]
 8001ea2:	04d9      	lsls	r1, r3, #19
 8001ea4:	6922      	ldr	r2, [r4, #16]
 8001ea6:	6022      	str	r2, [r4, #0]
 8001ea8:	d504      	bpl.n	8001eb4 <__sflush_r+0x7c>
 8001eaa:	1c42      	adds	r2, r0, #1
 8001eac:	d101      	bne.n	8001eb2 <__sflush_r+0x7a>
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	b903      	cbnz	r3, 8001eb4 <__sflush_r+0x7c>
 8001eb2:	6560      	str	r0, [r4, #84]	; 0x54
 8001eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001eb6:	602f      	str	r7, [r5, #0]
 8001eb8:	2900      	cmp	r1, #0
 8001eba:	d0ca      	beq.n	8001e52 <__sflush_r+0x1a>
 8001ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ec0:	4299      	cmp	r1, r3
 8001ec2:	d002      	beq.n	8001eca <__sflush_r+0x92>
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	f000 f8fb 	bl	80020c0 <_free_r>
 8001eca:	2000      	movs	r0, #0
 8001ecc:	6360      	str	r0, [r4, #52]	; 0x34
 8001ece:	e7c1      	b.n	8001e54 <__sflush_r+0x1c>
 8001ed0:	6a21      	ldr	r1, [r4, #32]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	47b0      	blx	r6
 8001ed8:	1c41      	adds	r1, r0, #1
 8001eda:	d1c7      	bne.n	8001e6c <__sflush_r+0x34>
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0c4      	beq.n	8001e6c <__sflush_r+0x34>
 8001ee2:	2b1d      	cmp	r3, #29
 8001ee4:	d001      	beq.n	8001eea <__sflush_r+0xb2>
 8001ee6:	2b16      	cmp	r3, #22
 8001ee8:	d101      	bne.n	8001eee <__sflush_r+0xb6>
 8001eea:	602f      	str	r7, [r5, #0]
 8001eec:	e7b1      	b.n	8001e52 <__sflush_r+0x1a>
 8001eee:	89a3      	ldrh	r3, [r4, #12]
 8001ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef4:	81a3      	strh	r3, [r4, #12]
 8001ef6:	e7ad      	b.n	8001e54 <__sflush_r+0x1c>
 8001ef8:	690f      	ldr	r7, [r1, #16]
 8001efa:	2f00      	cmp	r7, #0
 8001efc:	d0a9      	beq.n	8001e52 <__sflush_r+0x1a>
 8001efe:	0793      	lsls	r3, r2, #30
 8001f00:	680e      	ldr	r6, [r1, #0]
 8001f02:	bf08      	it	eq
 8001f04:	694b      	ldreq	r3, [r1, #20]
 8001f06:	600f      	str	r7, [r1, #0]
 8001f08:	bf18      	it	ne
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	eba6 0807 	sub.w	r8, r6, r7
 8001f10:	608b      	str	r3, [r1, #8]
 8001f12:	f1b8 0f00 	cmp.w	r8, #0
 8001f16:	dd9c      	ble.n	8001e52 <__sflush_r+0x1a>
 8001f18:	6a21      	ldr	r1, [r4, #32]
 8001f1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f1c:	4643      	mov	r3, r8
 8001f1e:	463a      	mov	r2, r7
 8001f20:	4628      	mov	r0, r5
 8001f22:	47b0      	blx	r6
 8001f24:	2800      	cmp	r0, #0
 8001f26:	dc06      	bgt.n	8001f36 <__sflush_r+0xfe>
 8001f28:	89a3      	ldrh	r3, [r4, #12]
 8001f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f2e:	81a3      	strh	r3, [r4, #12]
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	e78e      	b.n	8001e54 <__sflush_r+0x1c>
 8001f36:	4407      	add	r7, r0
 8001f38:	eba8 0800 	sub.w	r8, r8, r0
 8001f3c:	e7e9      	b.n	8001f12 <__sflush_r+0xda>
 8001f3e:	bf00      	nop
 8001f40:	20400001 	.word	0x20400001

08001f44 <_fflush_r>:
 8001f44:	b538      	push	{r3, r4, r5, lr}
 8001f46:	690b      	ldr	r3, [r1, #16]
 8001f48:	4605      	mov	r5, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	b913      	cbnz	r3, 8001f54 <_fflush_r+0x10>
 8001f4e:	2500      	movs	r5, #0
 8001f50:	4628      	mov	r0, r5
 8001f52:	bd38      	pop	{r3, r4, r5, pc}
 8001f54:	b118      	cbz	r0, 8001f5e <_fflush_r+0x1a>
 8001f56:	6983      	ldr	r3, [r0, #24]
 8001f58:	b90b      	cbnz	r3, 8001f5e <_fflush_r+0x1a>
 8001f5a:	f7ff fa4f 	bl	80013fc <__sinit>
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <_fflush_r+0x6c>)
 8001f60:	429c      	cmp	r4, r3
 8001f62:	d11b      	bne.n	8001f9c <_fflush_r+0x58>
 8001f64:	686c      	ldr	r4, [r5, #4]
 8001f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0ef      	beq.n	8001f4e <_fflush_r+0xa>
 8001f6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f70:	07d0      	lsls	r0, r2, #31
 8001f72:	d404      	bmi.n	8001f7e <_fflush_r+0x3a>
 8001f74:	0599      	lsls	r1, r3, #22
 8001f76:	d402      	bmi.n	8001f7e <_fflush_r+0x3a>
 8001f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f7a:	f7ff fadd 	bl	8001538 <__retarget_lock_acquire_recursive>
 8001f7e:	4628      	mov	r0, r5
 8001f80:	4621      	mov	r1, r4
 8001f82:	f7ff ff59 	bl	8001e38 <__sflush_r>
 8001f86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f88:	07da      	lsls	r2, r3, #31
 8001f8a:	4605      	mov	r5, r0
 8001f8c:	d4e0      	bmi.n	8001f50 <_fflush_r+0xc>
 8001f8e:	89a3      	ldrh	r3, [r4, #12]
 8001f90:	059b      	lsls	r3, r3, #22
 8001f92:	d4dd      	bmi.n	8001f50 <_fflush_r+0xc>
 8001f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f96:	f7ff fad0 	bl	800153a <__retarget_lock_release_recursive>
 8001f9a:	e7d9      	b.n	8001f50 <_fflush_r+0xc>
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <_fflush_r+0x70>)
 8001f9e:	429c      	cmp	r4, r3
 8001fa0:	d101      	bne.n	8001fa6 <_fflush_r+0x62>
 8001fa2:	68ac      	ldr	r4, [r5, #8]
 8001fa4:	e7df      	b.n	8001f66 <_fflush_r+0x22>
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <_fflush_r+0x74>)
 8001fa8:	429c      	cmp	r4, r3
 8001faa:	bf08      	it	eq
 8001fac:	68ec      	ldreq	r4, [r5, #12]
 8001fae:	e7da      	b.n	8001f66 <_fflush_r+0x22>
 8001fb0:	08002230 	.word	0x08002230
 8001fb4:	08002250 	.word	0x08002250
 8001fb8:	08002210 	.word	0x08002210

08001fbc <_lseek_r>:
 8001fbc:	b538      	push	{r3, r4, r5, lr}
 8001fbe:	4d07      	ldr	r5, [pc, #28]	; (8001fdc <_lseek_r+0x20>)
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	4608      	mov	r0, r1
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	602a      	str	r2, [r5, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f7ff f825 	bl	800101a <_lseek>
 8001fd0:	1c43      	adds	r3, r0, #1
 8001fd2:	d102      	bne.n	8001fda <_lseek_r+0x1e>
 8001fd4:	682b      	ldr	r3, [r5, #0]
 8001fd6:	b103      	cbz	r3, 8001fda <_lseek_r+0x1e>
 8001fd8:	6023      	str	r3, [r4, #0]
 8001fda:	bd38      	pop	{r3, r4, r5, pc}
 8001fdc:	2000009c 	.word	0x2000009c

08001fe0 <__swhatbuf_r>:
 8001fe0:	b570      	push	{r4, r5, r6, lr}
 8001fe2:	460e      	mov	r6, r1
 8001fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fe8:	2900      	cmp	r1, #0
 8001fea:	b096      	sub	sp, #88	; 0x58
 8001fec:	4614      	mov	r4, r2
 8001fee:	461d      	mov	r5, r3
 8001ff0:	da07      	bge.n	8002002 <__swhatbuf_r+0x22>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	602b      	str	r3, [r5, #0]
 8001ff6:	89b3      	ldrh	r3, [r6, #12]
 8001ff8:	061a      	lsls	r2, r3, #24
 8001ffa:	d410      	bmi.n	800201e <__swhatbuf_r+0x3e>
 8001ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002000:	e00e      	b.n	8002020 <__swhatbuf_r+0x40>
 8002002:	466a      	mov	r2, sp
 8002004:	f000 f8be 	bl	8002184 <_fstat_r>
 8002008:	2800      	cmp	r0, #0
 800200a:	dbf2      	blt.n	8001ff2 <__swhatbuf_r+0x12>
 800200c:	9a01      	ldr	r2, [sp, #4]
 800200e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002012:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002016:	425a      	negs	r2, r3
 8002018:	415a      	adcs	r2, r3
 800201a:	602a      	str	r2, [r5, #0]
 800201c:	e7ee      	b.n	8001ffc <__swhatbuf_r+0x1c>
 800201e:	2340      	movs	r3, #64	; 0x40
 8002020:	2000      	movs	r0, #0
 8002022:	6023      	str	r3, [r4, #0]
 8002024:	b016      	add	sp, #88	; 0x58
 8002026:	bd70      	pop	{r4, r5, r6, pc}

08002028 <__smakebuf_r>:
 8002028:	898b      	ldrh	r3, [r1, #12]
 800202a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800202c:	079d      	lsls	r5, r3, #30
 800202e:	4606      	mov	r6, r0
 8002030:	460c      	mov	r4, r1
 8002032:	d507      	bpl.n	8002044 <__smakebuf_r+0x1c>
 8002034:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002038:	6023      	str	r3, [r4, #0]
 800203a:	6123      	str	r3, [r4, #16]
 800203c:	2301      	movs	r3, #1
 800203e:	6163      	str	r3, [r4, #20]
 8002040:	b002      	add	sp, #8
 8002042:	bd70      	pop	{r4, r5, r6, pc}
 8002044:	ab01      	add	r3, sp, #4
 8002046:	466a      	mov	r2, sp
 8002048:	f7ff ffca 	bl	8001fe0 <__swhatbuf_r>
 800204c:	9900      	ldr	r1, [sp, #0]
 800204e:	4605      	mov	r5, r0
 8002050:	4630      	mov	r0, r6
 8002052:	f7ff fa73 	bl	800153c <_malloc_r>
 8002056:	b948      	cbnz	r0, 800206c <__smakebuf_r+0x44>
 8002058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800205c:	059a      	lsls	r2, r3, #22
 800205e:	d4ef      	bmi.n	8002040 <__smakebuf_r+0x18>
 8002060:	f023 0303 	bic.w	r3, r3, #3
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	81a3      	strh	r3, [r4, #12]
 800206a:	e7e3      	b.n	8002034 <__smakebuf_r+0xc>
 800206c:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <__smakebuf_r+0x7c>)
 800206e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002070:	89a3      	ldrh	r3, [r4, #12]
 8002072:	6020      	str	r0, [r4, #0]
 8002074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002078:	81a3      	strh	r3, [r4, #12]
 800207a:	9b00      	ldr	r3, [sp, #0]
 800207c:	6163      	str	r3, [r4, #20]
 800207e:	9b01      	ldr	r3, [sp, #4]
 8002080:	6120      	str	r0, [r4, #16]
 8002082:	b15b      	cbz	r3, 800209c <__smakebuf_r+0x74>
 8002084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002088:	4630      	mov	r0, r6
 800208a:	f000 f88d 	bl	80021a8 <_isatty_r>
 800208e:	b128      	cbz	r0, 800209c <__smakebuf_r+0x74>
 8002090:	89a3      	ldrh	r3, [r4, #12]
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	81a3      	strh	r3, [r4, #12]
 800209c:	89a0      	ldrh	r0, [r4, #12]
 800209e:	4305      	orrs	r5, r0
 80020a0:	81a5      	strh	r5, [r4, #12]
 80020a2:	e7cd      	b.n	8002040 <__smakebuf_r+0x18>
 80020a4:	08001395 	.word	0x08001395

080020a8 <__malloc_lock>:
 80020a8:	4801      	ldr	r0, [pc, #4]	; (80020b0 <__malloc_lock+0x8>)
 80020aa:	f7ff ba45 	b.w	8001538 <__retarget_lock_acquire_recursive>
 80020ae:	bf00      	nop
 80020b0:	20000094 	.word	0x20000094

080020b4 <__malloc_unlock>:
 80020b4:	4801      	ldr	r0, [pc, #4]	; (80020bc <__malloc_unlock+0x8>)
 80020b6:	f7ff ba40 	b.w	800153a <__retarget_lock_release_recursive>
 80020ba:	bf00      	nop
 80020bc:	20000094 	.word	0x20000094

080020c0 <_free_r>:
 80020c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020c2:	2900      	cmp	r1, #0
 80020c4:	d048      	beq.n	8002158 <_free_r+0x98>
 80020c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020ca:	9001      	str	r0, [sp, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f1a1 0404 	sub.w	r4, r1, #4
 80020d2:	bfb8      	it	lt
 80020d4:	18e4      	addlt	r4, r4, r3
 80020d6:	f7ff ffe7 	bl	80020a8 <__malloc_lock>
 80020da:	4a20      	ldr	r2, [pc, #128]	; (800215c <_free_r+0x9c>)
 80020dc:	9801      	ldr	r0, [sp, #4]
 80020de:	6813      	ldr	r3, [r2, #0]
 80020e0:	4615      	mov	r5, r2
 80020e2:	b933      	cbnz	r3, 80020f2 <_free_r+0x32>
 80020e4:	6063      	str	r3, [r4, #4]
 80020e6:	6014      	str	r4, [r2, #0]
 80020e8:	b003      	add	sp, #12
 80020ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80020ee:	f7ff bfe1 	b.w	80020b4 <__malloc_unlock>
 80020f2:	42a3      	cmp	r3, r4
 80020f4:	d90b      	bls.n	800210e <_free_r+0x4e>
 80020f6:	6821      	ldr	r1, [r4, #0]
 80020f8:	1862      	adds	r2, r4, r1
 80020fa:	4293      	cmp	r3, r2
 80020fc:	bf04      	itt	eq
 80020fe:	681a      	ldreq	r2, [r3, #0]
 8002100:	685b      	ldreq	r3, [r3, #4]
 8002102:	6063      	str	r3, [r4, #4]
 8002104:	bf04      	itt	eq
 8002106:	1852      	addeq	r2, r2, r1
 8002108:	6022      	streq	r2, [r4, #0]
 800210a:	602c      	str	r4, [r5, #0]
 800210c:	e7ec      	b.n	80020e8 <_free_r+0x28>
 800210e:	461a      	mov	r2, r3
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	b10b      	cbz	r3, 8002118 <_free_r+0x58>
 8002114:	42a3      	cmp	r3, r4
 8002116:	d9fa      	bls.n	800210e <_free_r+0x4e>
 8002118:	6811      	ldr	r1, [r2, #0]
 800211a:	1855      	adds	r5, r2, r1
 800211c:	42a5      	cmp	r5, r4
 800211e:	d10b      	bne.n	8002138 <_free_r+0x78>
 8002120:	6824      	ldr	r4, [r4, #0]
 8002122:	4421      	add	r1, r4
 8002124:	1854      	adds	r4, r2, r1
 8002126:	42a3      	cmp	r3, r4
 8002128:	6011      	str	r1, [r2, #0]
 800212a:	d1dd      	bne.n	80020e8 <_free_r+0x28>
 800212c:	681c      	ldr	r4, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	6053      	str	r3, [r2, #4]
 8002132:	4421      	add	r1, r4
 8002134:	6011      	str	r1, [r2, #0]
 8002136:	e7d7      	b.n	80020e8 <_free_r+0x28>
 8002138:	d902      	bls.n	8002140 <_free_r+0x80>
 800213a:	230c      	movs	r3, #12
 800213c:	6003      	str	r3, [r0, #0]
 800213e:	e7d3      	b.n	80020e8 <_free_r+0x28>
 8002140:	6825      	ldr	r5, [r4, #0]
 8002142:	1961      	adds	r1, r4, r5
 8002144:	428b      	cmp	r3, r1
 8002146:	bf04      	itt	eq
 8002148:	6819      	ldreq	r1, [r3, #0]
 800214a:	685b      	ldreq	r3, [r3, #4]
 800214c:	6063      	str	r3, [r4, #4]
 800214e:	bf04      	itt	eq
 8002150:	1949      	addeq	r1, r1, r5
 8002152:	6021      	streq	r1, [r4, #0]
 8002154:	6054      	str	r4, [r2, #4]
 8002156:	e7c7      	b.n	80020e8 <_free_r+0x28>
 8002158:	b003      	add	sp, #12
 800215a:	bd30      	pop	{r4, r5, pc}
 800215c:	20000088 	.word	0x20000088

08002160 <_read_r>:
 8002160:	b538      	push	{r3, r4, r5, lr}
 8002162:	4d07      	ldr	r5, [pc, #28]	; (8002180 <_read_r+0x20>)
 8002164:	4604      	mov	r4, r0
 8002166:	4608      	mov	r0, r1
 8002168:	4611      	mov	r1, r2
 800216a:	2200      	movs	r2, #0
 800216c:	602a      	str	r2, [r5, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	f7fe fef3 	bl	8000f5a <_read>
 8002174:	1c43      	adds	r3, r0, #1
 8002176:	d102      	bne.n	800217e <_read_r+0x1e>
 8002178:	682b      	ldr	r3, [r5, #0]
 800217a:	b103      	cbz	r3, 800217e <_read_r+0x1e>
 800217c:	6023      	str	r3, [r4, #0]
 800217e:	bd38      	pop	{r3, r4, r5, pc}
 8002180:	2000009c 	.word	0x2000009c

08002184 <_fstat_r>:
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	4d07      	ldr	r5, [pc, #28]	; (80021a4 <_fstat_r+0x20>)
 8002188:	2300      	movs	r3, #0
 800218a:	4604      	mov	r4, r0
 800218c:	4608      	mov	r0, r1
 800218e:	4611      	mov	r1, r2
 8002190:	602b      	str	r3, [r5, #0]
 8002192:	f7fe ff27 	bl	8000fe4 <_fstat>
 8002196:	1c43      	adds	r3, r0, #1
 8002198:	d102      	bne.n	80021a0 <_fstat_r+0x1c>
 800219a:	682b      	ldr	r3, [r5, #0]
 800219c:	b103      	cbz	r3, 80021a0 <_fstat_r+0x1c>
 800219e:	6023      	str	r3, [r4, #0]
 80021a0:	bd38      	pop	{r3, r4, r5, pc}
 80021a2:	bf00      	nop
 80021a4:	2000009c 	.word	0x2000009c

080021a8 <_isatty_r>:
 80021a8:	b538      	push	{r3, r4, r5, lr}
 80021aa:	4d06      	ldr	r5, [pc, #24]	; (80021c4 <_isatty_r+0x1c>)
 80021ac:	2300      	movs	r3, #0
 80021ae:	4604      	mov	r4, r0
 80021b0:	4608      	mov	r0, r1
 80021b2:	602b      	str	r3, [r5, #0]
 80021b4:	f7fe ff26 	bl	8001004 <_isatty>
 80021b8:	1c43      	adds	r3, r0, #1
 80021ba:	d102      	bne.n	80021c2 <_isatty_r+0x1a>
 80021bc:	682b      	ldr	r3, [r5, #0]
 80021be:	b103      	cbz	r3, 80021c2 <_isatty_r+0x1a>
 80021c0:	6023      	str	r3, [r4, #0]
 80021c2:	bd38      	pop	{r3, r4, r5, pc}
 80021c4:	2000009c 	.word	0x2000009c

080021c8 <_init>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	bf00      	nop
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr

080021d4 <_fini>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	bf00      	nop
 80021d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021da:	bc08      	pop	{r3}
 80021dc:	469e      	mov	lr, r3
 80021de:	4770      	bx	lr
